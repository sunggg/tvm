def @main(%input_ids: Tensor[(1, 128), int64], %segment_ids: Tensor[(1, 128), int64], %input_mask: Tensor[(1, 128), int64]) -> (Tensor[(1, 128), float32], Tensor[(1, 128), float32]) {
  %0 = less(%input_ids, 0 /* ty=int64 */) /* ty=Tensor[(1, 128), bool] */;
  %1 = add(%input_ids, 30522 /* ty=int64 */) /* ty=Tensor[(1, 128), int64] */;
  %2 = where(%0, %1, %input_ids) /* ty=Tensor[(1, 128), int64] */;
  %3 = take(meta[relay.Constant][74] /* ty=Tensor[(30522, 768), float32] */, %2, axis=0) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = less(%segment_ids, 0 /* ty=int64 */) /* ty=Tensor[(1, 128), bool] */;
  %5 = add(%segment_ids, 2 /* ty=int64 */) /* ty=Tensor[(1, 128), int64] */;
  %6 = where(%4, %5, %segment_ids) /* ty=Tensor[(1, 128), int64] */;
  %7 = add(%3, meta[relay.Constant][75] /* ty=Tensor[(1, 128, 768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = take(meta[relay.Constant][76] /* ty=Tensor[(2, 768), float32] */, %6, axis=0) /* ty=Tensor[(1, 128, 768), float32] */;
  %9 = add(%7, %8) /* ty=Tensor[(1, 128, 768), float32] */;
  %10 = mean(%9, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %11 = subtract(%9, %10) /* ty=Tensor[(1, 128, 768), float32] */;
  %12 = multiply(%11, %11) /* ty=Tensor[(1, 128, 768), float32] */;
  %13 = mean(%12, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %14 = add(%13, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %15 = subtract(%9, %10) /* ty=Tensor[(1, 128, 768), float32] */;
  %16 = sqrt(%14) /* ty=Tensor[(1, 128, 1), float32] */;
  %17 = divide(%15, %16) /* ty=Tensor[(1, 128, 768), float32] */;
  %18 = multiply(meta[relay.Constant][73] /* ty=Tensor[(768), float32] */, %17) /* ty=Tensor[(1, 128, 768), float32] */;
  %19 = add(%18, meta[relay.Constant][77] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %20 = qnn.quantize(%19, 0.0418306f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %21 = qnn.quantize(meta[relay.Constant][78] /* ty=Tensor[(768, 768), float32] */, 0.00832126f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %22 = transpose(%21, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %23 = reshape(%20, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %24 = transpose(%22, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %25 = qnn.dense(%23, %24, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0418306f /* ty=float32 */, 0.00832126f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %26 = reshape(%25, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %27 = qnn.quantize(meta[relay.Constant][72] /* ty=Tensor[(768), float32] */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %28 = qnn.requantize(%26, 0.000348083f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %29 = qnn.add(%27, %28, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %30 = reshape(%29, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %31 = transpose(%30, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %32 = qnn.requantize(%31, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0470353f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %33 = qnn.quantize(%19, 0.0418306f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %34 = qnn.quantize(meta[relay.Constant][80] /* ty=Tensor[(768, 768), float32] */, 0.00832126f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %35 = transpose(%34, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %36 = reshape(%33, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %37 = transpose(%35, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %38 = qnn.dense(%36, %37, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0418306f /* ty=float32 */, 0.00832126f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %39 = reshape(%38, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %40 = qnn.quantize(meta[relay.Constant][79] /* ty=Tensor[(768), float32] */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %41 = qnn.requantize(%39, 0.000348083f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %42 = qnn.add(%40, %41, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %43 = reshape(%42, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %44 = transpose(%43, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %45 = qnn.requantize(%44, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0470353f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %46 = reshape(%45, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %47 = reshape(%32, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %48 = transpose(%46, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %49 = qnn.batch_matmul(%47, %48, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0470353f /* ty=float32 */, 0.0470353f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %50 = reshape(%49, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %51 = qnn.requantize(%50, 0.00221232f /* ty=float32 */, 0 /* ty=int32 */, 0.821003f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %52 = qnn.dequantize(%51, 0.821003f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %53 = expand_dims(%input_mask, axis=1) /* ty=Tensor[(1, 1, 128), int64] */;
  %54 = expand_dims(%53, axis=2) /* ty=Tensor[(1, 1, 1, 128), int64] */;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %56 = subtract(1f /* ty=float32 */, %55) /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %57 = divide(%52, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %58 = multiply(%56, -10000f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %59 = add(%57, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %60 = nn.softmax(%59, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %61 = qnn.quantize(%60, 0.00468568f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %62 = qnn.quantize(%19, 0.0418306f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %63 = qnn.quantize(meta[relay.Constant][82] /* ty=Tensor[(768, 768), float32] */, 0.00832126f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %64 = transpose(%63, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %65 = reshape(%62, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %66 = transpose(%64, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %67 = qnn.dense(%65, %66, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0418306f /* ty=float32 */, 0.00832126f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %68 = reshape(%67, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %69 = qnn.quantize(meta[relay.Constant][81] /* ty=Tensor[(768), float32] */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %70 = qnn.requantize(%68, 0.000348083f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %71 = qnn.add(%69, %70, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %72 = reshape(%71, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %73 = transpose(%72, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %74 = qnn.requantize(%73, 0.0469714f /* ty=float32 */, 0 /* ty=int32 */, 0.0470353f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %75 = reshape(%74, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %76 = reshape(%61, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %77 = transpose(%75, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %78 = qnn.batch_matmul(%76, %77, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00468568f /* ty=float32 */, 0.0470353f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %79 = reshape(%78, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %80 = transpose(%79, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %81 = reshape(%80, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %82 = qnn.requantize(%81, 0.000220392f /* ty=float32 */, 0 /* ty=int32 */, 0.0139825f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %83 = qnn.quantize(meta[relay.Constant][83] /* ty=Tensor[(768, 768), float32] */, 0.00615392f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %84 = transpose(%83, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %85 = reshape(%82, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %86 = transpose(%84, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %87 = qnn.dense(%85, %86, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0139825f /* ty=float32 */, 0.00615392f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %88 = reshape(%87, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %89 = qnn.quantize(meta[relay.Constant][71] /* ty=Tensor[(768), float32] */, 0.0174485f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %90 = qnn.requantize(%88, 8.60473e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0174485f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %91 = qnn.add(%89, %90, 0.0174485f /* ty=float32 */, 0 /* ty=int32 */, 0.0174485f /* ty=float32 */, 0 /* ty=int32 */, 0.0174485f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %92 = qnn.requantize(%91, 0.0174485f /* ty=float32 */, 0 /* ty=int32 */, 0.0172169f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %93 = qnn.quantize(%19, 0.0418306f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %94 = qnn.add(%92, %93, 0.0172169f /* ty=float32 */, 0 /* ty=int32 */, 0.0418306f /* ty=float32 */, 0 /* ty=int32 */, 0.0423788f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %95 = qnn.dequantize(%94, 0.0423788f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %96 = mean(%95, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %97 = subtract(%95, %96) /* ty=Tensor[(1, 128, 768), float32] */;
  %98 = multiply(%97, %97) /* ty=Tensor[(1, 128, 768), float32] */;
  %99 = mean(%98, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %100 = add(%99, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %101 = subtract(%95, %96) /* ty=Tensor[(1, 128, 768), float32] */;
  %102 = sqrt(%100) /* ty=Tensor[(1, 128, 1), float32] */;
  %103 = divide(%101, %102) /* ty=Tensor[(1, 128, 768), float32] */;
  %104 = multiply(meta[relay.Constant][70] /* ty=Tensor[(768), float32] */, %103) /* ty=Tensor[(1, 128, 768), float32] */;
  %105 = add(%104, meta[relay.Constant][84] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %106 = qnn.quantize(%105, 0.281883f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %107 = qnn.quantize(meta[relay.Constant][85] /* ty=Tensor[(3072, 768), float32] */, 0.00479411f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %108 = transpose(%107, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %109 = reshape(%106, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %110 = transpose(%108, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %111 = qnn.dense(%109, %110, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.281883f /* ty=float32 */, 0.00479411f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %112 = reshape(%111, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %113 = qnn.requantize(%112, 0.00135138f /* ty=float32 */, 0 /* ty=int32 */, 0.0794641f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %114 = qnn.dequantize(%113, 0.0794641f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %115 = add(meta[relay.Constant][69] /* ty=Tensor[(3072), float32] */, %114) /* ty=Tensor[(1, 128, 3072), float32] */;
  %116 = divide(%115, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %117 = erf(%116) /* ty=Tensor[(1, 128, 3072), float32] */;
  %118 = add(%117, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %119 = multiply(%115, %118) /* ty=Tensor[(1, 128, 3072), float32] */;
  %120 = multiply(%119, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %121 = qnn.quantize(%120, 0.056826f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %122 = qnn.quantize(meta[relay.Constant][86] /* ty=Tensor[(768, 3072), float32] */, 0.012965f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %123 = transpose(%122, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %124 = reshape(%121, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %125 = transpose(%123, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %126 = qnn.dense(%124, %125, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.056826f /* ty=float32 */, 0.012965f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %127 = reshape(%126, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %128 = qnn.quantize(meta[relay.Constant][68] /* ty=Tensor[(768), float32] */, 0.230818f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %129 = qnn.requantize(%127, 0.000736747f /* ty=float32 */, 0 /* ty=int32 */, 0.230818f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %130 = qnn.add(%128, %129, 0.230818f /* ty=float32 */, 0 /* ty=int32 */, 0.230818f /* ty=float32 */, 0 /* ty=int32 */, 0.230818f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %131 = qnn.requantize(%130, 0.230818f /* ty=float32 */, 0 /* ty=int32 */, 0.233547f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %132 = qnn.quantize(%105, 0.281883f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %133 = qnn.add(%131, %132, 0.233547f /* ty=float32 */, 0 /* ty=int32 */, 0.281883f /* ty=float32 */, 0 /* ty=int32 */, 0.318795f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %134 = qnn.dequantize(%133, 0.318795f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %135 = mean(%134, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %136 = subtract(%134, %135) /* ty=Tensor[(1, 128, 768), float32] */;
  %137 = multiply(%136, %136) /* ty=Tensor[(1, 128, 768), float32] */;
  %138 = mean(%137, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %139 = add(%138, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %140 = subtract(%134, %135) /* ty=Tensor[(1, 128, 768), float32] */;
  %141 = sqrt(%139) /* ty=Tensor[(1, 128, 1), float32] */;
  %142 = divide(%140, %141) /* ty=Tensor[(1, 128, 768), float32] */;
  %143 = multiply(meta[relay.Constant][67] /* ty=Tensor[(768), float32] */, %142) /* ty=Tensor[(1, 128, 768), float32] */;
  %144 = add(%143, meta[relay.Constant][87] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %145 = qnn.quantize(%144, 0.0688788f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %146 = qnn.quantize(meta[relay.Constant][88] /* ty=Tensor[(768, 768), float32] */, 0.00445667f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %147 = transpose(%146, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %148 = reshape(%145, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %149 = transpose(%147, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %150 = qnn.dense(%148, %149, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0688788f /* ty=float32 */, 0.00445667f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %151 = reshape(%150, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %152 = qnn.quantize(meta[relay.Constant][66] /* ty=Tensor[(768), float32] */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %153 = qnn.requantize(%151, 0.00030697f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %154 = qnn.add(%152, %153, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %155 = reshape(%154, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %156 = transpose(%155, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %157 = qnn.requantize(%156, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0712028f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %158 = qnn.quantize(%144, 0.0688788f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %159 = qnn.quantize(meta[relay.Constant][90] /* ty=Tensor[(768, 768), float32] */, 0.00445667f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %160 = transpose(%159, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %161 = reshape(%158, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %162 = transpose(%160, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %163 = qnn.dense(%161, %162, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0688788f /* ty=float32 */, 0.00445667f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %164 = reshape(%163, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %165 = qnn.quantize(meta[relay.Constant][89] /* ty=Tensor[(768), float32] */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %166 = qnn.requantize(%164, 0.00030697f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %167 = qnn.add(%165, %166, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %168 = reshape(%167, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %169 = transpose(%168, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %170 = qnn.requantize(%169, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0712028f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %171 = reshape(%170, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %172 = reshape(%157, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %173 = transpose(%171, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %174 = qnn.batch_matmul(%172, %173, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0712028f /* ty=float32 */, 0.0712028f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %175 = reshape(%174, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %176 = qnn.requantize(%175, 0.00506984f /* ty=float32 */, 0 /* ty=int32 */, 3.40036f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %177 = qnn.dequantize(%176, 3.40036f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %178 = divide(%177, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %179 = add(%178, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %180 = nn.softmax(%179, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %181 = qnn.quantize(%180, 0.00782788f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %182 = qnn.quantize(%144, 0.0688788f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %183 = qnn.quantize(meta[relay.Constant][92] /* ty=Tensor[(768, 768), float32] */, 0.00445667f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %184 = transpose(%183, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %185 = reshape(%182, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %186 = transpose(%184, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %187 = qnn.dense(%185, %186, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0688788f /* ty=float32 */, 0.00445667f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %188 = reshape(%187, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %189 = qnn.quantize(meta[relay.Constant][91] /* ty=Tensor[(768), float32] */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %190 = qnn.requantize(%188, 0.00030697f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %191 = qnn.add(%189, %190, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %192 = reshape(%191, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %193 = transpose(%192, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %194 = qnn.requantize(%193, 0.0682223f /* ty=float32 */, 0 /* ty=int32 */, 0.0712028f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %195 = reshape(%194, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %196 = reshape(%181, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %197 = transpose(%195, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %198 = qnn.batch_matmul(%196, %197, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00782788f /* ty=float32 */, 0.0712028f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %199 = reshape(%198, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %200 = transpose(%199, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %201 = reshape(%200, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %202 = qnn.requantize(%201, 0.000557367f /* ty=float32 */, 0 /* ty=int32 */, 0.0165438f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %203 = qnn.quantize(meta[relay.Constant][93] /* ty=Tensor[(768, 768), float32] */, 0.00254014f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %204 = transpose(%203, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %205 = reshape(%202, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %206 = transpose(%204, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %207 = qnn.dense(%205, %206, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0165438f /* ty=float32 */, 0.00254014f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %208 = reshape(%207, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %209 = qnn.quantize(meta[relay.Constant][65] /* ty=Tensor[(768), float32] */, 0.0211234f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %210 = qnn.requantize(%208, 4.20235e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0211234f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %211 = qnn.add(%209, %210, 0.0211234f /* ty=float32 */, 0 /* ty=int32 */, 0.0211234f /* ty=float32 */, 0 /* ty=int32 */, 0.0211234f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %212 = qnn.requantize(%211, 0.0211234f /* ty=float32 */, 0 /* ty=int32 */, 0.020472f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %213 = qnn.quantize(%144, 0.0688788f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %214 = qnn.add(%212, %213, 0.020472f /* ty=float32 */, 0 /* ty=int32 */, 0.0688788f /* ty=float32 */, 0 /* ty=int32 */, 0.0785187f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %215 = qnn.dequantize(%214, 0.0785187f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %216 = mean(%215, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %217 = subtract(%215, %216) /* ty=Tensor[(1, 128, 768), float32] */;
  %218 = multiply(%217, %217) /* ty=Tensor[(1, 128, 768), float32] */;
  %219 = mean(%218, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %220 = add(%219, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %221 = subtract(%215, %216) /* ty=Tensor[(1, 128, 768), float32] */;
  %222 = sqrt(%220) /* ty=Tensor[(1, 128, 1), float32] */;
  %223 = divide(%221, %222) /* ty=Tensor[(1, 128, 768), float32] */;
  %224 = multiply(meta[relay.Constant][64] /* ty=Tensor[(768), float32] */, %223) /* ty=Tensor[(1, 128, 768), float32] */;
  %225 = add(%224, meta[relay.Constant][94] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %226 = qnn.quantize(%225, 0.352211f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %227 = qnn.quantize(meta[relay.Constant][95] /* ty=Tensor[(3072, 768), float32] */, 0.00433394f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %228 = transpose(%227, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %229 = reshape(%226, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %230 = transpose(%228, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %231 = qnn.dense(%229, %230, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.352211f /* ty=float32 */, 0.00433394f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %232 = reshape(%231, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %233 = qnn.requantize(%232, 0.00152646f /* ty=float32 */, 0 /* ty=int32 */, 0.0617177f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %234 = qnn.dequantize(%233, 0.0617177f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %235 = add(meta[relay.Constant][63] /* ty=Tensor[(3072), float32] */, %234) /* ty=Tensor[(1, 128, 3072), float32] */;
  %236 = divide(%235, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %237 = erf(%236) /* ty=Tensor[(1, 128, 3072), float32] */;
  %238 = add(%237, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %239 = multiply(%235, %238) /* ty=Tensor[(1, 128, 3072), float32] */;
  %240 = multiply(%239, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %241 = qnn.quantize(%240, 0.0309665f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %242 = qnn.quantize(meta[relay.Constant][96] /* ty=Tensor[(768, 3072), float32] */, 0.00804342f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %243 = transpose(%242, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %244 = reshape(%241, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %245 = transpose(%243, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %246 = qnn.dense(%244, %245, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0309665f /* ty=float32 */, 0.00804342f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %247 = reshape(%246, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %248 = qnn.quantize(meta[relay.Constant][62] /* ty=Tensor[(768), float32] */, 0.0677291f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %249 = qnn.requantize(%247, 0.000249077f /* ty=float32 */, 0 /* ty=int32 */, 0.0677291f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %250 = qnn.add(%248, %249, 0.0677291f /* ty=float32 */, 0 /* ty=int32 */, 0.0677291f /* ty=float32 */, 0 /* ty=int32 */, 0.0677291f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %251 = qnn.requantize(%250, 0.0677291f /* ty=float32 */, 0 /* ty=int32 */, 0.068776f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %252 = qnn.quantize(%225, 0.352211f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %253 = qnn.add(%251, %252, 0.068776f /* ty=float32 */, 0 /* ty=int32 */, 0.352211f /* ty=float32 */, 0 /* ty=int32 */, 0.411965f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %254 = qnn.dequantize(%253, 0.411965f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %255 = mean(%254, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %256 = subtract(%254, %255) /* ty=Tensor[(1, 128, 768), float32] */;
  %257 = multiply(%256, %256) /* ty=Tensor[(1, 128, 768), float32] */;
  %258 = mean(%257, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %259 = add(%258, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %260 = subtract(%254, %255) /* ty=Tensor[(1, 128, 768), float32] */;
  %261 = sqrt(%259) /* ty=Tensor[(1, 128, 1), float32] */;
  %262 = divide(%260, %261) /* ty=Tensor[(1, 128, 768), float32] */;
  %263 = multiply(meta[relay.Constant][61] /* ty=Tensor[(768), float32] */, %262) /* ty=Tensor[(1, 128, 768), float32] */;
  %264 = add(%263, meta[relay.Constant][97] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %265 = qnn.quantize(%264, 0.0787925f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %266 = qnn.quantize(meta[relay.Constant][98] /* ty=Tensor[(768, 768), float32] */, 0.00444273f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %267 = transpose(%266, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %268 = reshape(%265, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %269 = transpose(%267, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %270 = qnn.dense(%268, %269, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0787925f /* ty=float32 */, 0.00444273f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %271 = reshape(%270, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %272 = qnn.quantize(meta[relay.Constant][60] /* ty=Tensor[(768), float32] */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %273 = qnn.requantize(%271, 0.000350054f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %274 = qnn.add(%272, %273, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %275 = reshape(%274, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %276 = transpose(%275, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %277 = qnn.requantize(%276, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0461205f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %278 = qnn.quantize(%264, 0.0787925f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %279 = qnn.quantize(meta[relay.Constant][100] /* ty=Tensor[(768, 768), float32] */, 0.00444273f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %280 = transpose(%279, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %281 = reshape(%278, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %282 = transpose(%280, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %283 = qnn.dense(%281, %282, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0787925f /* ty=float32 */, 0.00444273f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %284 = reshape(%283, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %285 = qnn.quantize(meta[relay.Constant][99] /* ty=Tensor[(768), float32] */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %286 = qnn.requantize(%284, 0.000350054f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %287 = qnn.add(%285, %286, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %288 = reshape(%287, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %289 = transpose(%288, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %290 = qnn.requantize(%289, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0461205f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %291 = reshape(%290, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %292 = reshape(%277, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %293 = transpose(%291, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %294 = qnn.batch_matmul(%292, %293, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0461205f /* ty=float32 */, 0.0461205f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %295 = reshape(%294, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %296 = qnn.requantize(%295, 0.0021271f /* ty=float32 */, 0 /* ty=int32 */, 0.721348f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %297 = qnn.dequantize(%296, 0.721348f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %298 = divide(%297, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %299 = add(%298, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %300 = nn.softmax(%299, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %301 = qnn.quantize(%300, 0.00422856f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %302 = qnn.quantize(%264, 0.0787925f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %303 = qnn.quantize(meta[relay.Constant][102] /* ty=Tensor[(768, 768), float32] */, 0.00444273f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %304 = transpose(%303, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %305 = reshape(%302, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %306 = transpose(%304, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %307 = qnn.dense(%305, %306, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0787925f /* ty=float32 */, 0.00444273f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %308 = reshape(%307, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %309 = qnn.quantize(meta[relay.Constant][101] /* ty=Tensor[(768), float32] */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %310 = qnn.requantize(%308, 0.000350054f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %311 = qnn.add(%309, %310, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %312 = reshape(%311, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %313 = transpose(%312, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %314 = qnn.requantize(%313, 0.0433639f /* ty=float32 */, 0 /* ty=int32 */, 0.0461205f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %315 = reshape(%314, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %316 = reshape(%301, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %317 = transpose(%315, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %318 = qnn.batch_matmul(%316, %317, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00422856f /* ty=float32 */, 0.0461205f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %319 = reshape(%318, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %320 = transpose(%319, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %321 = reshape(%320, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %322 = qnn.requantize(%321, 0.000195023f /* ty=float32 */, 0 /* ty=int32 */, 0.0146809f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %323 = qnn.quantize(meta[relay.Constant][103] /* ty=Tensor[(768, 768), float32] */, 0.00476982f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %324 = transpose(%323, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %325 = reshape(%322, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %326 = transpose(%324, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %327 = qnn.dense(%325, %326, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0146809f /* ty=float32 */, 0.00476982f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %328 = reshape(%327, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %329 = qnn.quantize(meta[relay.Constant][59] /* ty=Tensor[(768), float32] */, 0.0105983f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %330 = qnn.requantize(%328, 7.00252e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0105983f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %331 = qnn.add(%329, %330, 0.0105983f /* ty=float32 */, 0 /* ty=int32 */, 0.0105983f /* ty=float32 */, 0 /* ty=int32 */, 0.0105983f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %332 = qnn.requantize(%331, 0.0105983f /* ty=float32 */, 0 /* ty=int32 */, 0.0104629f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %333 = qnn.quantize(%264, 0.0787925f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %334 = qnn.add(%332, %333, 0.0104629f /* ty=float32 */, 0 /* ty=int32 */, 0.0787925f /* ty=float32 */, 0 /* ty=int32 */, 0.0848232f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %335 = qnn.dequantize(%334, 0.0848232f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %336 = mean(%335, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %337 = subtract(%335, %336) /* ty=Tensor[(1, 128, 768), float32] */;
  %338 = multiply(%337, %337) /* ty=Tensor[(1, 128, 768), float32] */;
  %339 = mean(%338, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %340 = add(%339, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %341 = subtract(%335, %336) /* ty=Tensor[(1, 128, 768), float32] */;
  %342 = sqrt(%340) /* ty=Tensor[(1, 128, 1), float32] */;
  %343 = divide(%341, %342) /* ty=Tensor[(1, 128, 768), float32] */;
  %344 = multiply(meta[relay.Constant][58] /* ty=Tensor[(768), float32] */, %343) /* ty=Tensor[(1, 128, 768), float32] */;
  %345 = add(%344, meta[relay.Constant][104] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %346 = qnn.quantize(%345, 0.372895f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %347 = qnn.quantize(meta[relay.Constant][105] /* ty=Tensor[(3072, 768), float32] */, 0.00318091f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %348 = transpose(%347, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %349 = reshape(%346, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %350 = transpose(%348, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %351 = qnn.dense(%349, %350, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.372895f /* ty=float32 */, 0.00318091f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %352 = reshape(%351, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %353 = qnn.requantize(%352, 0.00118614f /* ty=float32 */, 0 /* ty=int32 */, 0.055361f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %354 = qnn.dequantize(%353, 0.055361f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %355 = add(meta[relay.Constant][57] /* ty=Tensor[(3072), float32] */, %354) /* ty=Tensor[(1, 128, 3072), float32] */;
  %356 = divide(%355, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %357 = erf(%356) /* ty=Tensor[(1, 128, 3072), float32] */;
  %358 = add(%357, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %359 = multiply(%355, %358) /* ty=Tensor[(1, 128, 3072), float32] */;
  %360 = multiply(%359, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %361 = qnn.quantize(%360, 0.0278601f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %362 = qnn.quantize(meta[relay.Constant][106] /* ty=Tensor[(768, 3072), float32] */, 0.012039f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %363 = transpose(%362, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %364 = reshape(%361, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %365 = transpose(%363, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %366 = qnn.dense(%364, %365, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0278601f /* ty=float32 */, 0.012039f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %367 = reshape(%366, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %368 = qnn.quantize(meta[relay.Constant][56] /* ty=Tensor[(768), float32] */, 0.0410462f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %369 = qnn.requantize(%367, 0.000335407f /* ty=float32 */, 0 /* ty=int32 */, 0.0410462f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %370 = qnn.add(%368, %369, 0.0410462f /* ty=float32 */, 0 /* ty=int32 */, 0.0410462f /* ty=float32 */, 0 /* ty=int32 */, 0.0410462f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %371 = qnn.requantize(%370, 0.0410462f /* ty=float32 */, 0 /* ty=int32 */, 0.0408709f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %372 = qnn.quantize(%345, 0.372895f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %373 = qnn.add(%371, %372, 0.0408709f /* ty=float32 */, 0 /* ty=int32 */, 0.372895f /* ty=float32 */, 0 /* ty=int32 */, 0.404154f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %374 = qnn.dequantize(%373, 0.404154f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %375 = mean(%374, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %376 = subtract(%374, %375) /* ty=Tensor[(1, 128, 768), float32] */;
  %377 = multiply(%376, %376) /* ty=Tensor[(1, 128, 768), float32] */;
  %378 = mean(%377, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %379 = add(%378, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %380 = subtract(%374, %375) /* ty=Tensor[(1, 128, 768), float32] */;
  %381 = sqrt(%379) /* ty=Tensor[(1, 128, 1), float32] */;
  %382 = divide(%380, %381) /* ty=Tensor[(1, 128, 768), float32] */;
  %383 = multiply(meta[relay.Constant][55] /* ty=Tensor[(768), float32] */, %382) /* ty=Tensor[(1, 128, 768), float32] */;
  %384 = add(%383, meta[relay.Constant][107] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %385 = qnn.quantize(%384, 0.0804915f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %386 = qnn.quantize(meta[relay.Constant][108] /* ty=Tensor[(768, 768), float32] */, 0.00477702f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %387 = transpose(%386, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %388 = reshape(%385, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %389 = transpose(%387, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %390 = qnn.dense(%388, %389, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0804915f /* ty=float32 */, 0.00477702f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %391 = reshape(%390, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %392 = qnn.quantize(meta[relay.Constant][54] /* ty=Tensor[(768), float32] */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %393 = qnn.requantize(%391, 0.000384509f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %394 = qnn.add(%392, %393, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %395 = reshape(%394, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %396 = transpose(%395, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %397 = qnn.requantize(%396, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.0643732f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %398 = qnn.quantize(%384, 0.0804915f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %399 = qnn.quantize(meta[relay.Constant][110] /* ty=Tensor[(768, 768), float32] */, 0.00477702f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %400 = transpose(%399, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %401 = reshape(%398, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %402 = transpose(%400, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %403 = qnn.dense(%401, %402, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0804915f /* ty=float32 */, 0.00477702f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %404 = reshape(%403, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %405 = qnn.quantize(meta[relay.Constant][109] /* ty=Tensor[(768), float32] */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %406 = qnn.requantize(%404, 0.000384509f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %407 = qnn.add(%405, %406, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %408 = reshape(%407, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %409 = transpose(%408, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %410 = qnn.requantize(%409, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.0643732f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %411 = reshape(%410, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %412 = reshape(%397, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %413 = transpose(%411, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %414 = qnn.batch_matmul(%412, %413, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0643732f /* ty=float32 */, 0.0643732f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %415 = reshape(%414, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %416 = qnn.requantize(%415, 0.00414391f /* ty=float32 */, 0 /* ty=int32 */, 2.49692f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %417 = qnn.dequantize(%416, 2.49692f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %418 = divide(%417, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %419 = add(%418, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %420 = nn.softmax(%419, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %421 = qnn.quantize(%420, 0.00775098f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %422 = qnn.quantize(%384, 0.0804915f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %423 = qnn.quantize(meta[relay.Constant][112] /* ty=Tensor[(768, 768), float32] */, 0.00477702f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %424 = transpose(%423, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %425 = reshape(%422, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %426 = transpose(%424, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %427 = qnn.dense(%425, %426, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0804915f /* ty=float32 */, 0.00477702f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %428 = reshape(%427, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %429 = qnn.quantize(meta[relay.Constant][111] /* ty=Tensor[(768), float32] */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %430 = qnn.requantize(%428, 0.000384509f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %431 = qnn.add(%429, %430, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.062452f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %432 = reshape(%431, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %433 = transpose(%432, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %434 = qnn.requantize(%433, 0.062452f /* ty=float32 */, 0 /* ty=int32 */, 0.0643732f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %435 = reshape(%434, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %436 = reshape(%421, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %437 = transpose(%435, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %438 = qnn.batch_matmul(%436, %437, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00775098f /* ty=float32 */, 0.0643732f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %439 = reshape(%438, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %440 = transpose(%439, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %441 = reshape(%440, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %442 = qnn.requantize(%441, 0.000498956f /* ty=float32 */, 0 /* ty=int32 */, 0.014498f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %443 = qnn.quantize(meta[relay.Constant][113] /* ty=Tensor[(768, 768), float32] */, 0.00808613f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %444 = transpose(%443, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %445 = reshape(%442, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %446 = transpose(%444, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %447 = qnn.dense(%445, %446, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.014498f /* ty=float32 */, 0.00808613f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %448 = reshape(%447, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %449 = qnn.quantize(meta[relay.Constant][53] /* ty=Tensor[(768), float32] */, 0.00935347f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %450 = qnn.requantize(%448, 0.000117232f /* ty=float32 */, 0 /* ty=int32 */, 0.00935347f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %451 = qnn.add(%449, %450, 0.00935347f /* ty=float32 */, 0 /* ty=int32 */, 0.00935347f /* ty=float32 */, 0 /* ty=int32 */, 0.00935347f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %452 = qnn.requantize(%451, 0.00935347f /* ty=float32 */, 0 /* ty=int32 */, 0.00886807f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %453 = qnn.quantize(%384, 0.0804915f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %454 = qnn.add(%452, %453, 0.00886807f /* ty=float32 */, 0 /* ty=int32 */, 0.0804915f /* ty=float32 */, 0 /* ty=int32 */, 0.083282f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %455 = qnn.dequantize(%454, 0.083282f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %456 = mean(%455, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %457 = subtract(%455, %456) /* ty=Tensor[(1, 128, 768), float32] */;
  %458 = multiply(%457, %457) /* ty=Tensor[(1, 128, 768), float32] */;
  %459 = mean(%458, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %460 = add(%459, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %461 = subtract(%455, %456) /* ty=Tensor[(1, 128, 768), float32] */;
  %462 = sqrt(%460) /* ty=Tensor[(1, 128, 1), float32] */;
  %463 = divide(%461, %462) /* ty=Tensor[(1, 128, 768), float32] */;
  %464 = multiply(meta[relay.Constant][52] /* ty=Tensor[(768), float32] */, %463) /* ty=Tensor[(1, 128, 768), float32] */;
  %465 = add(%464, meta[relay.Constant][114] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %466 = qnn.quantize(%465, 0.383442f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %467 = qnn.quantize(meta[relay.Constant][115] /* ty=Tensor[(3072, 768), float32] */, 0.00330547f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %468 = transpose(%467, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %469 = reshape(%466, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %470 = transpose(%468, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %471 = qnn.dense(%469, %470, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.383442f /* ty=float32 */, 0.00330547f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %472 = reshape(%471, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %473 = qnn.requantize(%472, 0.00126745f /* ty=float32 */, 0 /* ty=int32 */, 0.0637589f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %474 = qnn.dequantize(%473, 0.0637589f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %475 = add(meta[relay.Constant][51] /* ty=Tensor[(3072), float32] */, %474) /* ty=Tensor[(1, 128, 3072), float32] */;
  %476 = divide(%475, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %477 = erf(%476) /* ty=Tensor[(1, 128, 3072), float32] */;
  %478 = add(%477, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %479 = multiply(%475, %478) /* ty=Tensor[(1, 128, 3072), float32] */;
  %480 = multiply(%479, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %481 = qnn.quantize(%480, 0.0292148f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %482 = qnn.quantize(meta[relay.Constant][116] /* ty=Tensor[(768, 3072), float32] */, 0.0132786f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %483 = transpose(%482, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %484 = reshape(%481, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %485 = transpose(%483, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %486 = qnn.dense(%484, %485, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0292148f /* ty=float32 */, 0.0132786f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %487 = reshape(%486, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %488 = qnn.quantize(meta[relay.Constant][50] /* ty=Tensor[(768), float32] */, 0.0186149f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %489 = qnn.requantize(%487, 0.000387933f /* ty=float32 */, 0 /* ty=int32 */, 0.0186149f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %490 = qnn.add(%488, %489, 0.0186149f /* ty=float32 */, 0 /* ty=int32 */, 0.0186149f /* ty=float32 */, 0 /* ty=int32 */, 0.0186149f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %491 = qnn.requantize(%490, 0.0186149f /* ty=float32 */, 0 /* ty=int32 */, 0.0185611f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %492 = qnn.quantize(%465, 0.383442f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %493 = qnn.add(%491, %492, 0.0185611f /* ty=float32 */, 0 /* ty=int32 */, 0.383442f /* ty=float32 */, 0 /* ty=int32 */, 0.385651f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %494 = qnn.dequantize(%493, 0.385651f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %495 = mean(%494, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %496 = subtract(%494, %495) /* ty=Tensor[(1, 128, 768), float32] */;
  %497 = multiply(%496, %496) /* ty=Tensor[(1, 128, 768), float32] */;
  %498 = mean(%497, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %499 = add(%498, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %500 = subtract(%494, %495) /* ty=Tensor[(1, 128, 768), float32] */;
  %501 = sqrt(%499) /* ty=Tensor[(1, 128, 1), float32] */;
  %502 = divide(%500, %501) /* ty=Tensor[(1, 128, 768), float32] */;
  %503 = multiply(meta[relay.Constant][49] /* ty=Tensor[(768), float32] */, %502) /* ty=Tensor[(1, 128, 768), float32] */;
  %504 = add(%503, meta[relay.Constant][117] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %505 = qnn.quantize(%504, 0.0897698f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %506 = qnn.quantize(meta[relay.Constant][118] /* ty=Tensor[(768, 768), float32] */, 0.00359064f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %507 = transpose(%506, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %508 = reshape(%505, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %509 = transpose(%507, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %510 = qnn.dense(%508, %509, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0897698f /* ty=float32 */, 0.00359064f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %511 = reshape(%510, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %512 = qnn.quantize(meta[relay.Constant][48] /* ty=Tensor[(768), float32] */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %513 = qnn.requantize(%511, 0.000322331f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %514 = qnn.add(%512, %513, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %515 = reshape(%514, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %516 = transpose(%515, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %517 = qnn.requantize(%516, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0451669f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %518 = qnn.quantize(%504, 0.0897698f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %519 = qnn.quantize(meta[relay.Constant][120] /* ty=Tensor[(768, 768), float32] */, 0.00359064f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %520 = transpose(%519, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %521 = reshape(%518, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %522 = transpose(%520, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %523 = qnn.dense(%521, %522, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0897698f /* ty=float32 */, 0.00359064f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %524 = reshape(%523, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %525 = qnn.quantize(meta[relay.Constant][119] /* ty=Tensor[(768), float32] */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %526 = qnn.requantize(%524, 0.000322331f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %527 = qnn.add(%525, %526, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %528 = reshape(%527, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %529 = transpose(%528, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %530 = qnn.requantize(%529, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0451669f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %531 = reshape(%530, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %532 = reshape(%517, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %533 = transpose(%531, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %534 = qnn.batch_matmul(%532, %533, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0451669f /* ty=float32 */, 0.0451669f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %535 = reshape(%534, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %536 = qnn.requantize(%535, 0.00204005f /* ty=float32 */, 0 /* ty=int32 */, 0.804519f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %537 = qnn.dequantize(%536, 0.804519f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %538 = divide(%537, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %539 = add(%538, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %540 = nn.softmax(%539, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %541 = qnn.quantize(%540, 0.00352344f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %542 = qnn.quantize(%504, 0.0897698f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %543 = qnn.quantize(meta[relay.Constant][122] /* ty=Tensor[(768, 768), float32] */, 0.00359064f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %544 = transpose(%543, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %545 = reshape(%542, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %546 = transpose(%544, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %547 = qnn.dense(%545, %546, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0897698f /* ty=float32 */, 0.00359064f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %548 = reshape(%547, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %549 = qnn.quantize(meta[relay.Constant][121] /* ty=Tensor[(768), float32] */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %550 = qnn.requantize(%548, 0.000322331f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %551 = qnn.add(%549, %550, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %552 = reshape(%551, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %553 = transpose(%552, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %554 = qnn.requantize(%553, 0.0441592f /* ty=float32 */, 0 /* ty=int32 */, 0.0451669f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %555 = reshape(%554, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %556 = reshape(%541, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %557 = transpose(%555, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %558 = qnn.batch_matmul(%556, %557, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00352344f /* ty=float32 */, 0.0451669f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %559 = reshape(%558, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %560 = transpose(%559, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %561 = reshape(%560, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %562 = qnn.requantize(%561, 0.000159143f /* ty=float32 */, 0 /* ty=int32 */, 0.0145269f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %563 = qnn.quantize(meta[relay.Constant][123] /* ty=Tensor[(768, 768), float32] */, 0.0116933f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %564 = transpose(%563, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %565 = reshape(%562, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %566 = transpose(%564, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %567 = qnn.dense(%565, %566, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0145269f /* ty=float32 */, 0.0116933f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %568 = reshape(%567, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %569 = qnn.quantize(meta[relay.Constant][47] /* ty=Tensor[(768), float32] */, 0.0111839f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %570 = qnn.requantize(%568, 0.000169868f /* ty=float32 */, 0 /* ty=int32 */, 0.0111839f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %571 = qnn.add(%569, %570, 0.0111839f /* ty=float32 */, 0 /* ty=int32 */, 0.0111839f /* ty=float32 */, 0 /* ty=int32 */, 0.0111839f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %572 = qnn.requantize(%571, 0.0111839f /* ty=float32 */, 0 /* ty=int32 */, 0.0103687f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %573 = qnn.quantize(%504, 0.0897698f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %574 = qnn.add(%572, %573, 0.0103687f /* ty=float32 */, 0 /* ty=int32 */, 0.0897698f /* ty=float32 */, 0 /* ty=int32 */, 0.0929001f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %575 = qnn.dequantize(%574, 0.0929001f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %576 = mean(%575, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %577 = subtract(%575, %576) /* ty=Tensor[(1, 128, 768), float32] */;
  %578 = multiply(%577, %577) /* ty=Tensor[(1, 128, 768), float32] */;
  %579 = mean(%578, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %580 = add(%579, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %581 = subtract(%575, %576) /* ty=Tensor[(1, 128, 768), float32] */;
  %582 = sqrt(%580) /* ty=Tensor[(1, 128, 1), float32] */;
  %583 = divide(%581, %582) /* ty=Tensor[(1, 128, 768), float32] */;
  %584 = multiply(meta[relay.Constant][46] /* ty=Tensor[(768), float32] */, %583) /* ty=Tensor[(1, 128, 768), float32] */;
  %585 = add(%584, meta[relay.Constant][124] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %586 = qnn.quantize(%585, 0.425838f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %587 = qnn.quantize(meta[relay.Constant][125] /* ty=Tensor[(3072, 768), float32] */, 0.00361215f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %588 = transpose(%587, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %589 = reshape(%586, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %590 = transpose(%588, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %591 = qnn.dense(%589, %590, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.425838f /* ty=float32 */, 0.00361215f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %592 = reshape(%591, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %593 = qnn.requantize(%592, 0.00153819f /* ty=float32 */, 0 /* ty=int32 */, 0.0608309f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %594 = qnn.dequantize(%593, 0.0608309f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %595 = add(meta[relay.Constant][45] /* ty=Tensor[(3072), float32] */, %594) /* ty=Tensor[(1, 128, 3072), float32] */;
  %596 = divide(%595, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %597 = erf(%596) /* ty=Tensor[(1, 128, 3072), float32] */;
  %598 = add(%597, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %599 = multiply(%595, %598) /* ty=Tensor[(1, 128, 3072), float32] */;
  %600 = multiply(%599, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %601 = qnn.quantize(%600, 0.0278554f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %602 = qnn.quantize(meta[relay.Constant][126] /* ty=Tensor[(768, 3072), float32] */, 0.0123745f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %603 = transpose(%602, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %604 = reshape(%601, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %605 = transpose(%603, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %606 = qnn.dense(%604, %605, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0278554f /* ty=float32 */, 0.0123745f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %607 = reshape(%606, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %608 = qnn.quantize(meta[relay.Constant][44] /* ty=Tensor[(768), float32] */, 0.0315896f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %609 = qnn.requantize(%607, 0.000344696f /* ty=float32 */, 0 /* ty=int32 */, 0.0315896f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %610 = qnn.add(%608, %609, 0.0315896f /* ty=float32 */, 0 /* ty=int32 */, 0.0315896f /* ty=float32 */, 0 /* ty=int32 */, 0.0315896f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %611 = qnn.requantize(%610, 0.0315896f /* ty=float32 */, 0 /* ty=int32 */, 0.0293737f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %612 = qnn.quantize(%585, 0.425838f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %613 = qnn.add(%611, %612, 0.0293737f /* ty=float32 */, 0 /* ty=int32 */, 0.425838f /* ty=float32 */, 0 /* ty=int32 */, 0.40425f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %614 = qnn.dequantize(%613, 0.40425f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %615 = mean(%614, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %616 = subtract(%614, %615) /* ty=Tensor[(1, 128, 768), float32] */;
  %617 = multiply(%616, %616) /* ty=Tensor[(1, 128, 768), float32] */;
  %618 = mean(%617, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %619 = add(%618, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %620 = subtract(%614, %615) /* ty=Tensor[(1, 128, 768), float32] */;
  %621 = sqrt(%619) /* ty=Tensor[(1, 128, 1), float32] */;
  %622 = divide(%620, %621) /* ty=Tensor[(1, 128, 768), float32] */;
  %623 = multiply(meta[relay.Constant][43] /* ty=Tensor[(768), float32] */, %622) /* ty=Tensor[(1, 128, 768), float32] */;
  %624 = add(%623, meta[relay.Constant][127] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %625 = qnn.quantize(%624, 0.0862374f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %626 = qnn.quantize(meta[relay.Constant][128] /* ty=Tensor[(768, 768), float32] */, 0.00376215f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %627 = transpose(%626, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %628 = reshape(%625, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %629 = transpose(%627, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %630 = qnn.dense(%628, %629, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0862374f /* ty=float32 */, 0.00376215f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %631 = reshape(%630, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %632 = qnn.quantize(meta[relay.Constant][42] /* ty=Tensor[(768), float32] */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %633 = qnn.requantize(%631, 0.000324438f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %634 = qnn.add(%632, %633, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %635 = reshape(%634, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %636 = transpose(%635, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %637 = qnn.requantize(%636, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0509308f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %638 = qnn.quantize(%624, 0.0862374f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %639 = qnn.quantize(meta[relay.Constant][130] /* ty=Tensor[(768, 768), float32] */, 0.00376215f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %640 = transpose(%639, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %641 = reshape(%638, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %642 = transpose(%640, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %643 = qnn.dense(%641, %642, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0862374f /* ty=float32 */, 0.00376215f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %644 = reshape(%643, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %645 = qnn.quantize(meta[relay.Constant][129] /* ty=Tensor[(768), float32] */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %646 = qnn.requantize(%644, 0.000324438f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %647 = qnn.add(%645, %646, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %648 = reshape(%647, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %649 = transpose(%648, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %650 = qnn.requantize(%649, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0509308f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %651 = reshape(%650, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %652 = reshape(%637, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %653 = transpose(%651, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %654 = qnn.batch_matmul(%652, %653, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0509308f /* ty=float32 */, 0.0509308f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %655 = reshape(%654, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %656 = qnn.requantize(%655, 0.00259395f /* ty=float32 */, 0 /* ty=int32 */, 1.18478f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %657 = qnn.dequantize(%656, 1.18478f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %658 = divide(%657, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %659 = add(%658, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %660 = nn.softmax(%659, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %661 = qnn.quantize(%660, 0.00576953f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %662 = qnn.quantize(%624, 0.0862374f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %663 = qnn.quantize(meta[relay.Constant][132] /* ty=Tensor[(768, 768), float32] */, 0.00376215f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %664 = transpose(%663, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %665 = reshape(%662, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %666 = transpose(%664, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %667 = qnn.dense(%665, %666, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0862374f /* ty=float32 */, 0.00376215f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %668 = reshape(%667, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %669 = qnn.quantize(meta[relay.Constant][131] /* ty=Tensor[(768), float32] */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %670 = qnn.requantize(%668, 0.000324438f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %671 = qnn.add(%669, %670, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %672 = reshape(%671, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %673 = transpose(%672, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %674 = qnn.requantize(%673, 0.0477849f /* ty=float32 */, 0 /* ty=int32 */, 0.0509308f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %675 = reshape(%674, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %676 = reshape(%661, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %677 = transpose(%675, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %678 = qnn.batch_matmul(%676, %677, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00576953f /* ty=float32 */, 0.0509308f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %679 = reshape(%678, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %680 = transpose(%679, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %681 = reshape(%680, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %682 = qnn.requantize(%681, 0.000293847f /* ty=float32 */, 0 /* ty=int32 */, 0.0146255f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %683 = qnn.quantize(meta[relay.Constant][133] /* ty=Tensor[(768, 768), float32] */, 0.00323867f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %684 = transpose(%683, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %685 = reshape(%682, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %686 = transpose(%684, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %687 = qnn.dense(%685, %686, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0146255f /* ty=float32 */, 0.00323867f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %688 = reshape(%687, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %689 = qnn.quantize(meta[relay.Constant][41] /* ty=Tensor[(768), float32] */, 0.0104989f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %690 = qnn.requantize(%688, 4.73671e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0104989f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %691 = qnn.add(%689, %690, 0.0104989f /* ty=float32 */, 0 /* ty=int32 */, 0.0104989f /* ty=float32 */, 0 /* ty=int32 */, 0.0104989f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %692 = qnn.requantize(%691, 0.0104989f /* ty=float32 */, 0 /* ty=int32 */, 0.0103623f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %693 = qnn.quantize(%624, 0.0862374f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %694 = qnn.add(%692, %693, 0.0103623f /* ty=float32 */, 0 /* ty=int32 */, 0.0862374f /* ty=float32 */, 0 /* ty=int32 */, 0.0879086f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %695 = qnn.dequantize(%694, 0.0879086f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %696 = mean(%695, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %697 = subtract(%695, %696) /* ty=Tensor[(1, 128, 768), float32] */;
  %698 = multiply(%697, %697) /* ty=Tensor[(1, 128, 768), float32] */;
  %699 = mean(%698, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %700 = add(%699, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %701 = subtract(%695, %696) /* ty=Tensor[(1, 128, 768), float32] */;
  %702 = sqrt(%700) /* ty=Tensor[(1, 128, 1), float32] */;
  %703 = divide(%701, %702) /* ty=Tensor[(1, 128, 768), float32] */;
  %704 = multiply(meta[relay.Constant][40] /* ty=Tensor[(768), float32] */, %703) /* ty=Tensor[(1, 128, 768), float32] */;
  %705 = add(%704, meta[relay.Constant][134] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %706 = qnn.quantize(%705, 0.381835f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %707 = qnn.quantize(meta[relay.Constant][135] /* ty=Tensor[(3072, 768), float32] */, 0.0033407f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %708 = transpose(%707, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %709 = reshape(%706, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %710 = transpose(%708, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %711 = qnn.dense(%709, %710, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.381835f /* ty=float32 */, 0.0033407f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %712 = reshape(%711, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %713 = qnn.requantize(%712, 0.0012756f /* ty=float32 */, 0 /* ty=int32 */, 0.0616998f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %714 = qnn.dequantize(%713, 0.0616998f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %715 = add(meta[relay.Constant][39] /* ty=Tensor[(3072), float32] */, %714) /* ty=Tensor[(1, 128, 3072), float32] */;
  %716 = divide(%715, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %717 = erf(%716) /* ty=Tensor[(1, 128, 3072), float32] */;
  %718 = add(%717, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %719 = multiply(%715, %718) /* ty=Tensor[(1, 128, 3072), float32] */;
  %720 = multiply(%719, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %721 = qnn.quantize(%720, 0.0225147f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %722 = qnn.quantize(meta[relay.Constant][136] /* ty=Tensor[(768, 3072), float32] */, 0.0132314f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %723 = transpose(%722, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %724 = reshape(%721, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %725 = transpose(%723, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %726 = qnn.dense(%724, %725, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0225147f /* ty=float32 */, 0.0132314f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %727 = reshape(%726, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %728 = qnn.quantize(meta[relay.Constant][38] /* ty=Tensor[(768), float32] */, 0.0441688f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %729 = qnn.requantize(%727, 0.0002979f /* ty=float32 */, 0 /* ty=int32 */, 0.0441688f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %730 = qnn.add(%728, %729, 0.0441688f /* ty=float32 */, 0 /* ty=int32 */, 0.0441688f /* ty=float32 */, 0 /* ty=int32 */, 0.0441688f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %731 = qnn.requantize(%730, 0.0441688f /* ty=float32 */, 0 /* ty=int32 */, 0.0398552f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %732 = qnn.quantize(%705, 0.381835f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %733 = qnn.add(%731, %732, 0.0398552f /* ty=float32 */, 0 /* ty=int32 */, 0.381835f /* ty=float32 */, 0 /* ty=int32 */, 0.348884f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %734 = qnn.dequantize(%733, 0.348884f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %735 = mean(%734, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %736 = subtract(%734, %735) /* ty=Tensor[(1, 128, 768), float32] */;
  %737 = multiply(%736, %736) /* ty=Tensor[(1, 128, 768), float32] */;
  %738 = mean(%737, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %739 = add(%738, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %740 = subtract(%734, %735) /* ty=Tensor[(1, 128, 768), float32] */;
  %741 = sqrt(%739) /* ty=Tensor[(1, 128, 1), float32] */;
  %742 = divide(%740, %741) /* ty=Tensor[(1, 128, 768), float32] */;
  %743 = multiply(meta[relay.Constant][37] /* ty=Tensor[(768), float32] */, %742) /* ty=Tensor[(1, 128, 768), float32] */;
  %744 = add(%743, meta[relay.Constant][137] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %745 = qnn.quantize(%744, 0.0867861f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %746 = qnn.quantize(meta[relay.Constant][138] /* ty=Tensor[(768, 768), float32] */, 0.00482944f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %747 = transpose(%746, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %748 = reshape(%745, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %749 = transpose(%747, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %750 = qnn.dense(%748, %749, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0867861f /* ty=float32 */, 0.00482944f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %751 = reshape(%750, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %752 = qnn.quantize(meta[relay.Constant][36] /* ty=Tensor[(768), float32] */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %753 = qnn.requantize(%751, 0.000419128f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %754 = qnn.add(%752, %753, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %755 = reshape(%754, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %756 = transpose(%755, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %757 = qnn.requantize(%756, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0579253f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %758 = qnn.quantize(%744, 0.0867861f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %759 = qnn.quantize(meta[relay.Constant][140] /* ty=Tensor[(768, 768), float32] */, 0.00482944f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %760 = transpose(%759, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %761 = reshape(%758, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %762 = transpose(%760, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %763 = qnn.dense(%761, %762, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0867861f /* ty=float32 */, 0.00482944f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %764 = reshape(%763, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %765 = qnn.quantize(meta[relay.Constant][139] /* ty=Tensor[(768), float32] */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %766 = qnn.requantize(%764, 0.000419128f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %767 = qnn.add(%765, %766, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %768 = reshape(%767, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %769 = transpose(%768, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %770 = qnn.requantize(%769, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0579253f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %771 = reshape(%770, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %772 = reshape(%757, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %773 = transpose(%771, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %774 = qnn.batch_matmul(%772, %773, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0579253f /* ty=float32 */, 0.0579253f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %775 = reshape(%774, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %776 = qnn.requantize(%775, 0.00335534f /* ty=float32 */, 0 /* ty=int32 */, 2.54691f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %777 = qnn.dequantize(%776, 2.54691f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %778 = divide(%777, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %779 = add(%778, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %780 = nn.softmax(%779, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %781 = qnn.quantize(%780, 0.00770485f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %782 = qnn.quantize(%744, 0.0867861f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %783 = qnn.quantize(meta[relay.Constant][142] /* ty=Tensor[(768, 768), float32] */, 0.00482944f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %784 = transpose(%783, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %785 = reshape(%782, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %786 = transpose(%784, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %787 = qnn.dense(%785, %786, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0867861f /* ty=float32 */, 0.00482944f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %788 = reshape(%787, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %789 = qnn.quantize(meta[relay.Constant][141] /* ty=Tensor[(768), float32] */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %790 = qnn.requantize(%788, 0.000419128f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %791 = qnn.add(%789, %790, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %792 = reshape(%791, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %793 = transpose(%792, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %794 = qnn.requantize(%793, 0.0578421f /* ty=float32 */, 0 /* ty=int32 */, 0.0579253f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %795 = reshape(%794, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %796 = reshape(%781, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %797 = transpose(%795, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %798 = qnn.batch_matmul(%796, %797, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00770485f /* ty=float32 */, 0.0579253f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %799 = reshape(%798, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %800 = transpose(%799, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %801 = reshape(%800, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %802 = qnn.requantize(%801, 0.000446306f /* ty=float32 */, 0 /* ty=int32 */, 0.0144553f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %803 = qnn.quantize(meta[relay.Constant][143] /* ty=Tensor[(768, 768), float32] */, 0.0035507f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %804 = transpose(%803, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %805 = reshape(%802, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %806 = transpose(%804, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %807 = qnn.dense(%805, %806, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0144553f /* ty=float32 */, 0.0035507f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %808 = reshape(%807, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %809 = qnn.quantize(meta[relay.Constant][35] /* ty=Tensor[(768), float32] */, 0.0113865f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %810 = qnn.requantize(%808, 5.13263e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0113865f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %811 = qnn.add(%809, %810, 0.0113865f /* ty=float32 */, 0 /* ty=int32 */, 0.0113865f /* ty=float32 */, 0 /* ty=int32 */, 0.0113865f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %812 = qnn.requantize(%811, 0.0113865f /* ty=float32 */, 0 /* ty=int32 */, 0.0110223f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %813 = qnn.quantize(%744, 0.0867861f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %814 = qnn.add(%812, %813, 0.0110223f /* ty=float32 */, 0 /* ty=int32 */, 0.0867861f /* ty=float32 */, 0 /* ty=int32 */, 0.0887498f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %815 = qnn.dequantize(%814, 0.0887498f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %816 = mean(%815, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %817 = subtract(%815, %816) /* ty=Tensor[(1, 128, 768), float32] */;
  %818 = multiply(%817, %817) /* ty=Tensor[(1, 128, 768), float32] */;
  %819 = mean(%818, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %820 = add(%819, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %821 = subtract(%815, %816) /* ty=Tensor[(1, 128, 768), float32] */;
  %822 = sqrt(%820) /* ty=Tensor[(1, 128, 1), float32] */;
  %823 = divide(%821, %822) /* ty=Tensor[(1, 128, 768), float32] */;
  %824 = multiply(meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, %823) /* ty=Tensor[(1, 128, 768), float32] */;
  %825 = add(%824, meta[relay.Constant][144] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %826 = qnn.quantize(%825, 0.361102f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %827 = qnn.quantize(meta[relay.Constant][145] /* ty=Tensor[(3072, 768), float32] */, 0.00394721f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %828 = transpose(%827, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %829 = reshape(%826, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %830 = transpose(%828, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %831 = qnn.dense(%829, %830, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.361102f /* ty=float32 */, 0.00394721f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %832 = reshape(%831, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %833 = qnn.requantize(%832, 0.00142535f /* ty=float32 */, 0 /* ty=int32 */, 0.0591114f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %834 = qnn.dequantize(%833, 0.0591114f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %835 = add(meta[relay.Constant][33] /* ty=Tensor[(3072), float32] */, %834) /* ty=Tensor[(1, 128, 3072), float32] */;
  %836 = divide(%835, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %837 = erf(%836) /* ty=Tensor[(1, 128, 3072), float32] */;
  %838 = add(%837, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %839 = multiply(%835, %838) /* ty=Tensor[(1, 128, 3072), float32] */;
  %840 = multiply(%839, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %841 = qnn.quantize(%840, 0.022785f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %842 = qnn.quantize(meta[relay.Constant][146] /* ty=Tensor[(768, 3072), float32] */, 0.0151709f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %843 = transpose(%842, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %844 = reshape(%841, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %845 = transpose(%843, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %846 = qnn.dense(%844, %845, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.022785f /* ty=float32 */, 0.0151709f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %847 = reshape(%846, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %848 = qnn.quantize(meta[relay.Constant][32] /* ty=Tensor[(768), float32] */, 0.0493731f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %849 = qnn.requantize(%847, 0.000345669f /* ty=float32 */, 0 /* ty=int32 */, 0.0493731f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %850 = qnn.add(%848, %849, 0.0493731f /* ty=float32 */, 0 /* ty=int32 */, 0.0493731f /* ty=float32 */, 0 /* ty=int32 */, 0.0493731f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %851 = qnn.requantize(%850, 0.0493731f /* ty=float32 */, 0 /* ty=int32 */, 0.0437628f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %852 = qnn.quantize(%825, 0.361102f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %853 = qnn.add(%851, %852, 0.0437628f /* ty=float32 */, 0 /* ty=int32 */, 0.361102f /* ty=float32 */, 0 /* ty=int32 */, 0.32935f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %854 = qnn.dequantize(%853, 0.32935f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %855 = mean(%854, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %856 = subtract(%854, %855) /* ty=Tensor[(1, 128, 768), float32] */;
  %857 = multiply(%856, %856) /* ty=Tensor[(1, 128, 768), float32] */;
  %858 = mean(%857, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %859 = add(%858, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %860 = subtract(%854, %855) /* ty=Tensor[(1, 128, 768), float32] */;
  %861 = sqrt(%859) /* ty=Tensor[(1, 128, 1), float32] */;
  %862 = divide(%860, %861) /* ty=Tensor[(1, 128, 768), float32] */;
  %863 = multiply(meta[relay.Constant][31] /* ty=Tensor[(768), float32] */, %862) /* ty=Tensor[(1, 128, 768), float32] */;
  %864 = add(%863, meta[relay.Constant][147] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %865 = qnn.quantize(%864, 0.0995139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %866 = qnn.quantize(meta[relay.Constant][148] /* ty=Tensor[(768, 768), float32] */, 0.00319648f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %867 = transpose(%866, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %868 = reshape(%865, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %869 = transpose(%867, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %870 = qnn.dense(%868, %869, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0995139f /* ty=float32 */, 0.00319648f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %871 = reshape(%870, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %872 = qnn.quantize(meta[relay.Constant][30] /* ty=Tensor[(768), float32] */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %873 = qnn.requantize(%871, 0.000318094f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %874 = qnn.add(%872, %873, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %875 = reshape(%874, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %876 = transpose(%875, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %877 = qnn.requantize(%876, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0565243f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %878 = qnn.quantize(%864, 0.0995139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %879 = qnn.quantize(meta[relay.Constant][150] /* ty=Tensor[(768, 768), float32] */, 0.00319648f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %880 = transpose(%879, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %881 = reshape(%878, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %882 = transpose(%880, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %883 = qnn.dense(%881, %882, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0995139f /* ty=float32 */, 0.00319648f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %884 = reshape(%883, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %885 = qnn.quantize(meta[relay.Constant][149] /* ty=Tensor[(768), float32] */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %886 = qnn.requantize(%884, 0.000318094f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %887 = qnn.add(%885, %886, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %888 = reshape(%887, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %889 = transpose(%888, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %890 = qnn.requantize(%889, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0565243f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %891 = reshape(%890, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %892 = reshape(%877, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %893 = transpose(%891, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %894 = qnn.batch_matmul(%892, %893, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0565243f /* ty=float32 */, 0.0565243f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %895 = reshape(%894, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %896 = qnn.requantize(%895, 0.00319499f /* ty=float32 */, 0 /* ty=int32 */, 1.69195f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %897 = qnn.dequantize(%896, 1.69195f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %898 = divide(%897, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %899 = add(%898, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %900 = nn.softmax(%899, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %901 = qnn.quantize(%900, 0.00780481f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %902 = qnn.quantize(%864, 0.0995139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %903 = qnn.quantize(meta[relay.Constant][152] /* ty=Tensor[(768, 768), float32] */, 0.00319648f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %904 = transpose(%903, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %905 = reshape(%902, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %906 = transpose(%904, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %907 = qnn.dense(%905, %906, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0995139f /* ty=float32 */, 0.00319648f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %908 = reshape(%907, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %909 = qnn.quantize(meta[relay.Constant][151] /* ty=Tensor[(768), float32] */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %910 = qnn.requantize(%908, 0.000318094f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %911 = qnn.add(%909, %910, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %912 = reshape(%911, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %913 = transpose(%912, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %914 = qnn.requantize(%913, 0.0564837f /* ty=float32 */, 0 /* ty=int32 */, 0.0565243f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %915 = reshape(%914, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %916 = reshape(%901, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %917 = transpose(%915, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %918 = qnn.batch_matmul(%916, %917, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00780481f /* ty=float32 */, 0.0565243f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %919 = reshape(%918, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %920 = transpose(%919, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %921 = reshape(%920, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %922 = qnn.requantize(%921, 0.000441161f /* ty=float32 */, 0 /* ty=int32 */, 0.0151161f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %923 = qnn.quantize(meta[relay.Constant][153] /* ty=Tensor[(768, 768), float32] */, 0.00411084f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %924 = transpose(%923, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %925 = reshape(%922, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %926 = transpose(%924, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %927 = qnn.dense(%925, %926, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0151161f /* ty=float32 */, 0.00411084f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %928 = reshape(%927, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %929 = qnn.quantize(meta[relay.Constant][29] /* ty=Tensor[(768), float32] */, 0.0104847f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %930 = qnn.requantize(%928, 6.21398e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0104847f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %931 = qnn.add(%929, %930, 0.0104847f /* ty=float32 */, 0 /* ty=int32 */, 0.0104847f /* ty=float32 */, 0 /* ty=int32 */, 0.0104847f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %932 = qnn.requantize(%931, 0.0104847f /* ty=float32 */, 0 /* ty=int32 */, 0.0100781f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %933 = qnn.quantize(%864, 0.0995139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %934 = qnn.add(%932, %933, 0.0100781f /* ty=float32 */, 0 /* ty=int32 */, 0.0995139f /* ty=float32 */, 0 /* ty=int32 */, 0.0998758f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %935 = qnn.dequantize(%934, 0.0998758f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %936 = mean(%935, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %937 = subtract(%935, %936) /* ty=Tensor[(1, 128, 768), float32] */;
  %938 = multiply(%937, %937) /* ty=Tensor[(1, 128, 768), float32] */;
  %939 = mean(%938, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %940 = add(%939, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %941 = subtract(%935, %936) /* ty=Tensor[(1, 128, 768), float32] */;
  %942 = sqrt(%940) /* ty=Tensor[(1, 128, 1), float32] */;
  %943 = divide(%941, %942) /* ty=Tensor[(1, 128, 768), float32] */;
  %944 = multiply(meta[relay.Constant][28] /* ty=Tensor[(768), float32] */, %943) /* ty=Tensor[(1, 128, 768), float32] */;
  %945 = add(%944, meta[relay.Constant][154] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %946 = qnn.quantize(%945, 0.282313f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %947 = qnn.quantize(meta[relay.Constant][155] /* ty=Tensor[(3072, 768), float32] */, 0.00666945f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %948 = transpose(%947, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %949 = reshape(%946, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %950 = transpose(%948, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %951 = qnn.dense(%949, %950, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.282313f /* ty=float32 */, 0.00666945f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %952 = reshape(%951, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %953 = qnn.requantize(%952, 0.00188287f /* ty=float32 */, 0 /* ty=int32 */, 0.106411f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %954 = qnn.dequantize(%953, 0.106411f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %955 = add(meta[relay.Constant][27] /* ty=Tensor[(3072), float32] */, %954) /* ty=Tensor[(1, 128, 3072), float32] */;
  %956 = divide(%955, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %957 = erf(%956) /* ty=Tensor[(1, 128, 3072), float32] */;
  %958 = add(%957, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %959 = multiply(%955, %958) /* ty=Tensor[(1, 128, 3072), float32] */;
  %960 = multiply(%959, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %961 = qnn.quantize(%960, 0.0238399f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %962 = qnn.quantize(meta[relay.Constant][156] /* ty=Tensor[(768, 3072), float32] */, 0.0253f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %963 = transpose(%962, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %964 = reshape(%961, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %965 = transpose(%963, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %966 = qnn.dense(%964, %965, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0238399f /* ty=float32 */, 0.0253f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %967 = reshape(%966, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %968 = qnn.quantize(meta[relay.Constant][26] /* ty=Tensor[(768), float32] */, 0.0444694f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %969 = qnn.requantize(%967, 0.000603149f /* ty=float32 */, 0 /* ty=int32 */, 0.0444694f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %970 = qnn.add(%968, %969, 0.0444694f /* ty=float32 */, 0 /* ty=int32 */, 0.0444694f /* ty=float32 */, 0 /* ty=int32 */, 0.0444694f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %971 = qnn.requantize(%970, 0.0444694f /* ty=float32 */, 0 /* ty=int32 */, 0.0366031f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %972 = qnn.quantize(%945, 0.282313f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %973 = qnn.add(%971, %972, 0.0366031f /* ty=float32 */, 0 /* ty=int32 */, 0.282313f /* ty=float32 */, 0 /* ty=int32 */, 0.258628f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %974 = qnn.dequantize(%973, 0.258628f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %975 = mean(%974, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %976 = subtract(%974, %975) /* ty=Tensor[(1, 128, 768), float32] */;
  %977 = multiply(%976, %976) /* ty=Tensor[(1, 128, 768), float32] */;
  %978 = mean(%977, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %979 = add(%978, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %980 = subtract(%974, %975) /* ty=Tensor[(1, 128, 768), float32] */;
  %981 = sqrt(%979) /* ty=Tensor[(1, 128, 1), float32] */;
  %982 = divide(%980, %981) /* ty=Tensor[(1, 128, 768), float32] */;
  %983 = multiply(meta[relay.Constant][25] /* ty=Tensor[(768), float32] */, %982) /* ty=Tensor[(1, 128, 768), float32] */;
  %984 = add(%983, meta[relay.Constant][157] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %985 = qnn.quantize(%984, 0.131961f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %986 = qnn.quantize(meta[relay.Constant][158] /* ty=Tensor[(768, 768), float32] */, 0.00379763f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %987 = transpose(%986, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %988 = reshape(%985, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %989 = transpose(%987, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %990 = qnn.dense(%988, %989, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.131961f /* ty=float32 */, 0.00379763f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %991 = reshape(%990, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %992 = qnn.quantize(meta[relay.Constant][24] /* ty=Tensor[(768), float32] */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %993 = qnn.requantize(%991, 0.000501141f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %994 = qnn.add(%992, %993, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %995 = reshape(%994, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %996 = transpose(%995, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %997 = qnn.requantize(%996, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0572781f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %998 = qnn.quantize(%984, 0.131961f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %999 = qnn.quantize(meta[relay.Constant][160] /* ty=Tensor[(768, 768), float32] */, 0.00379763f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1000 = transpose(%999, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1001 = reshape(%998, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1002 = transpose(%1000, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1003 = qnn.dense(%1001, %1002, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.131961f /* ty=float32 */, 0.00379763f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1004 = reshape(%1003, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1005 = qnn.quantize(meta[relay.Constant][159] /* ty=Tensor[(768), float32] */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1006 = qnn.requantize(%1004, 0.000501141f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1007 = qnn.add(%1005, %1006, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1008 = reshape(%1007, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1009 = transpose(%1008, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1010 = qnn.requantize(%1009, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0572781f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1011 = reshape(%1010, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1012 = reshape(%997, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1013 = transpose(%1011, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1014 = qnn.batch_matmul(%1012, %1013, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0572781f /* ty=float32 */, 0.0572781f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %1015 = reshape(%1014, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1016 = qnn.requantize(%1015, 0.00328078f /* ty=float32 */, 0 /* ty=int32 */, 0.944639f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1017 = qnn.dequantize(%1016, 0.944639f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1018 = divide(%1017, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1019 = add(%1018, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1020 = nn.softmax(%1019, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1021 = qnn.quantize(%1020, 0.00538113f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1022 = qnn.quantize(%984, 0.131961f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1023 = qnn.quantize(meta[relay.Constant][162] /* ty=Tensor[(768, 768), float32] */, 0.00379763f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1024 = transpose(%1023, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1025 = reshape(%1022, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1026 = transpose(%1024, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1027 = qnn.dense(%1025, %1026, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.131961f /* ty=float32 */, 0.00379763f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1028 = reshape(%1027, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1029 = qnn.quantize(meta[relay.Constant][161] /* ty=Tensor[(768), float32] */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1030 = qnn.requantize(%1028, 0.000501141f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1031 = qnn.add(%1029, %1030, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1032 = reshape(%1031, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1033 = transpose(%1032, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1034 = qnn.requantize(%1033, 0.0537358f /* ty=float32 */, 0 /* ty=int32 */, 0.0572781f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1035 = reshape(%1034, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1036 = reshape(%1021, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %1037 = transpose(%1035, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1038 = qnn.batch_matmul(%1036, %1037, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00538113f /* ty=float32 */, 0.0572781f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %1039 = reshape(%1038, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1040 = transpose(%1039, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %1041 = reshape(%1040, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1042 = qnn.requantize(%1041, 0.000308221f /* ty=float32 */, 0 /* ty=int32 */, 0.0139551f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1043 = qnn.quantize(meta[relay.Constant][163] /* ty=Tensor[(768, 768), float32] */, 0.00260045f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1044 = transpose(%1043, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1045 = reshape(%1042, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1046 = transpose(%1044, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1047 = qnn.dense(%1045, %1046, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0139551f /* ty=float32 */, 0.00260045f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1048 = reshape(%1047, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1049 = qnn.quantize(meta[relay.Constant][23] /* ty=Tensor[(768), float32] */, 0.0118063f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1050 = qnn.requantize(%1048, 3.62894e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0118063f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1051 = qnn.add(%1049, %1050, 0.0118063f /* ty=float32 */, 0 /* ty=int32 */, 0.0118063f /* ty=float32 */, 0 /* ty=int32 */, 0.0118063f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1052 = qnn.requantize(%1051, 0.0118063f /* ty=float32 */, 0 /* ty=int32 */, 0.00937457f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1053 = qnn.quantize(%984, 0.131961f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1054 = qnn.add(%1052, %1053, 0.00937457f /* ty=float32 */, 0 /* ty=int32 */, 0.131961f /* ty=float32 */, 0 /* ty=int32 */, 0.131664f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1055 = qnn.dequantize(%1054, 0.131664f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1056 = mean(%1055, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1057 = subtract(%1055, %1056) /* ty=Tensor[(1, 128, 768), float32] */;
  %1058 = multiply(%1057, %1057) /* ty=Tensor[(1, 128, 768), float32] */;
  %1059 = mean(%1058, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1060 = add(%1059, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1061 = subtract(%1055, %1056) /* ty=Tensor[(1, 128, 768), float32] */;
  %1062 = sqrt(%1060) /* ty=Tensor[(1, 128, 1), float32] */;
  %1063 = divide(%1061, %1062) /* ty=Tensor[(1, 128, 768), float32] */;
  %1064 = multiply(meta[relay.Constant][22] /* ty=Tensor[(768), float32] */, %1063) /* ty=Tensor[(1, 128, 768), float32] */;
  %1065 = add(%1064, meta[relay.Constant][164] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1066 = qnn.quantize(%1065, 0.226912f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1067 = qnn.quantize(meta[relay.Constant][165] /* ty=Tensor[(3072, 768), float32] */, 0.00835873f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %1068 = transpose(%1067, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %1069 = reshape(%1066, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1070 = transpose(%1068, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %1071 = qnn.dense(%1069, %1070, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.226912f /* ty=float32 */, 0.00835873f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %1072 = reshape(%1071, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1073 = qnn.requantize(%1072, 0.0018967f /* ty=float32 */, 0 /* ty=int32 */, 0.194485f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %1074 = qnn.dequantize(%1073, 0.194485f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1075 = add(meta[relay.Constant][21] /* ty=Tensor[(3072), float32] */, %1074) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1076 = divide(%1075, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1077 = erf(%1076) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1078 = add(%1077, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1079 = multiply(%1075, %1078) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1080 = multiply(%1079, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1081 = qnn.quantize(%1080, 0.0239143f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %1082 = qnn.quantize(meta[relay.Constant][166] /* ty=Tensor[(768, 3072), float32] */, 0.0470547f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %1083 = transpose(%1082, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %1084 = reshape(%1081, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %1085 = transpose(%1083, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %1086 = qnn.dense(%1084, %1085, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0239143f /* ty=float32 */, 0.0470547f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1087 = reshape(%1086, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1088 = qnn.quantize(meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, 0.0219463f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1089 = qnn.requantize(%1087, 0.00112528f /* ty=float32 */, 0 /* ty=int32 */, 0.0219463f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1090 = qnn.add(%1088, %1089, 0.0219463f /* ty=float32 */, 0 /* ty=int32 */, 0.0219463f /* ty=float32 */, 0 /* ty=int32 */, 0.0219463f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1091 = qnn.requantize(%1090, 0.0219463f /* ty=float32 */, 0 /* ty=int32 */, 0.0175665f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1092 = qnn.quantize(%1065, 0.226912f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1093 = qnn.add(%1091, %1092, 0.0175665f /* ty=float32 */, 0 /* ty=int32 */, 0.226912f /* ty=float32 */, 0 /* ty=int32 */, 0.213401f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1094 = qnn.dequantize(%1093, 0.213401f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1095 = mean(%1094, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1096 = subtract(%1094, %1095) /* ty=Tensor[(1, 128, 768), float32] */;
  %1097 = multiply(%1096, %1096) /* ty=Tensor[(1, 128, 768), float32] */;
  %1098 = mean(%1097, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1099 = add(%1098, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1100 = subtract(%1094, %1095) /* ty=Tensor[(1, 128, 768), float32] */;
  %1101 = sqrt(%1099) /* ty=Tensor[(1, 128, 1), float32] */;
  %1102 = divide(%1100, %1101) /* ty=Tensor[(1, 128, 768), float32] */;
  %1103 = multiply(meta[relay.Constant][19] /* ty=Tensor[(768), float32] */, %1102) /* ty=Tensor[(1, 128, 768), float32] */;
  %1104 = add(%1103, meta[relay.Constant][167] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1105 = qnn.quantize(%1104, 0.161954f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1106 = qnn.quantize(meta[relay.Constant][168] /* ty=Tensor[(768, 768), float32] */, 0.00329916f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1107 = transpose(%1106, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1108 = reshape(%1105, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1109 = transpose(%1107, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1110 = qnn.dense(%1108, %1109, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.161954f /* ty=float32 */, 0.00329916f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1111 = reshape(%1110, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1112 = qnn.quantize(meta[relay.Constant][18] /* ty=Tensor[(768), float32] */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1113 = qnn.requantize(%1111, 0.000534311f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1114 = qnn.add(%1112, %1113, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1115 = reshape(%1114, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1116 = transpose(%1115, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1117 = qnn.requantize(%1116, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0591812f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1118 = qnn.quantize(%1104, 0.161954f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1119 = qnn.quantize(meta[relay.Constant][170] /* ty=Tensor[(768, 768), float32] */, 0.00329916f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1120 = transpose(%1119, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1121 = reshape(%1118, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1122 = transpose(%1120, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1123 = qnn.dense(%1121, %1122, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.161954f /* ty=float32 */, 0.00329916f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1124 = reshape(%1123, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1125 = qnn.quantize(meta[relay.Constant][169] /* ty=Tensor[(768), float32] */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1126 = qnn.requantize(%1124, 0.000534311f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1127 = qnn.add(%1125, %1126, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1128 = reshape(%1127, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1129 = transpose(%1128, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1130 = qnn.requantize(%1129, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0591812f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1131 = reshape(%1130, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1132 = reshape(%1117, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1133 = transpose(%1131, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1134 = qnn.batch_matmul(%1132, %1133, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0591812f /* ty=float32 */, 0.0591812f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %1135 = reshape(%1134, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1136 = qnn.requantize(%1135, 0.00350242f /* ty=float32 */, 0 /* ty=int32 */, 0.970322f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1137 = qnn.dequantize(%1136, 0.970322f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1138 = divide(%1137, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1139 = add(%1138, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1140 = nn.softmax(%1139, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1141 = qnn.quantize(%1140, 0.00389631f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1142 = qnn.quantize(%1104, 0.161954f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1143 = qnn.quantize(meta[relay.Constant][172] /* ty=Tensor[(768, 768), float32] */, 0.00329916f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1144 = transpose(%1143, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1145 = reshape(%1142, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1146 = transpose(%1144, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1147 = qnn.dense(%1145, %1146, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.161954f /* ty=float32 */, 0.00329916f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1148 = reshape(%1147, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1149 = qnn.quantize(meta[relay.Constant][171] /* ty=Tensor[(768), float32] */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1150 = qnn.requantize(%1148, 0.000534311f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1151 = qnn.add(%1149, %1150, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1152 = reshape(%1151, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1153 = transpose(%1152, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1154 = qnn.requantize(%1153, 0.0543461f /* ty=float32 */, 0 /* ty=int32 */, 0.0591812f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1155 = reshape(%1154, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1156 = reshape(%1141, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %1157 = transpose(%1155, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1158 = qnn.batch_matmul(%1156, %1157, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00389631f /* ty=float32 */, 0.0591812f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %1159 = reshape(%1158, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1160 = transpose(%1159, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %1161 = reshape(%1160, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1162 = qnn.requantize(%1161, 0.000230588f /* ty=float32 */, 0 /* ty=int32 */, 0.0144599f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1163 = qnn.quantize(meta[relay.Constant][173] /* ty=Tensor[(768, 768), float32] */, 0.00229341f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1164 = transpose(%1163, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1165 = reshape(%1162, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1166 = transpose(%1164, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1167 = qnn.dense(%1165, %1166, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0144599f /* ty=float32 */, 0.00229341f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1168 = reshape(%1167, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1169 = qnn.quantize(meta[relay.Constant][17] /* ty=Tensor[(768), float32] */, 0.0140473f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1170 = qnn.requantize(%1168, 3.31625e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0140473f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1171 = qnn.add(%1169, %1170, 0.0140473f /* ty=float32 */, 0 /* ty=int32 */, 0.0140473f /* ty=float32 */, 0 /* ty=int32 */, 0.0140473f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1172 = qnn.requantize(%1171, 0.0140473f /* ty=float32 */, 0 /* ty=int32 */, 0.00940999f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1173 = qnn.quantize(%1104, 0.161954f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1174 = qnn.add(%1172, %1173, 0.00940999f /* ty=float32 */, 0 /* ty=int32 */, 0.161954f /* ty=float32 */, 0 /* ty=int32 */, 0.166359f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1175 = qnn.dequantize(%1174, 0.166359f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1176 = mean(%1175, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1177 = subtract(%1175, %1176) /* ty=Tensor[(1, 128, 768), float32] */;
  %1178 = multiply(%1177, %1177) /* ty=Tensor[(1, 128, 768), float32] */;
  %1179 = mean(%1178, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1180 = add(%1179, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1181 = subtract(%1175, %1176) /* ty=Tensor[(1, 128, 768), float32] */;
  %1182 = sqrt(%1180) /* ty=Tensor[(1, 128, 1), float32] */;
  %1183 = divide(%1181, %1182) /* ty=Tensor[(1, 128, 768), float32] */;
  %1184 = multiply(meta[relay.Constant][16] /* ty=Tensor[(768), float32] */, %1183) /* ty=Tensor[(1, 128, 768), float32] */;
  %1185 = add(%1184, meta[relay.Constant][174] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1186 = qnn.quantize(%1185, 0.20307f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1187 = qnn.quantize(meta[relay.Constant][175] /* ty=Tensor[(3072, 768), float32] */, 0.0154252f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %1188 = transpose(%1187, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %1189 = reshape(%1186, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1190 = transpose(%1188, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %1191 = qnn.dense(%1189, %1190, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.20307f /* ty=float32 */, 0.0154252f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %1192 = reshape(%1191, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1193 = qnn.requantize(%1192, 0.0031324f /* ty=float32 */, 0 /* ty=int32 */, 0.136854f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %1194 = qnn.dequantize(%1193, 0.136854f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1195 = add(meta[relay.Constant][15] /* ty=Tensor[(3072), float32] */, %1194) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1196 = divide(%1195, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1197 = erf(%1196) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1198 = add(%1197, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1199 = multiply(%1195, %1198) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1200 = multiply(%1199, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1201 = qnn.quantize(%1200, 0.0204103f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %1202 = qnn.quantize(meta[relay.Constant][176] /* ty=Tensor[(768, 3072), float32] */, 0.0437615f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %1203 = transpose(%1202, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %1204 = reshape(%1201, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %1205 = transpose(%1203, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %1206 = qnn.dense(%1204, %1205, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0204103f /* ty=float32 */, 0.0437615f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1207 = reshape(%1206, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1208 = qnn.quantize(meta[relay.Constant][14] /* ty=Tensor[(768), float32] */, 0.0235126f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1209 = qnn.requantize(%1207, 0.000893183f /* ty=float32 */, 0 /* ty=int32 */, 0.0235126f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1210 = qnn.add(%1208, %1209, 0.0235126f /* ty=float32 */, 0 /* ty=int32 */, 0.0235126f /* ty=float32 */, 0 /* ty=int32 */, 0.0235126f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1211 = qnn.requantize(%1210, 0.0235126f /* ty=float32 */, 0 /* ty=int32 */, 0.0196115f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1212 = qnn.quantize(%1185, 0.20307f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1213 = qnn.add(%1211, %1212, 0.0196115f /* ty=float32 */, 0 /* ty=int32 */, 0.20307f /* ty=float32 */, 0 /* ty=int32 */, 0.19123f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1214 = qnn.dequantize(%1213, 0.19123f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1215 = mean(%1214, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1216 = subtract(%1214, %1215) /* ty=Tensor[(1, 128, 768), float32] */;
  %1217 = multiply(%1216, %1216) /* ty=Tensor[(1, 128, 768), float32] */;
  %1218 = mean(%1217, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1219 = add(%1218, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1220 = subtract(%1214, %1215) /* ty=Tensor[(1, 128, 768), float32] */;
  %1221 = sqrt(%1219) /* ty=Tensor[(1, 128, 1), float32] */;
  %1222 = divide(%1220, %1221) /* ty=Tensor[(1, 128, 768), float32] */;
  %1223 = multiply(meta[relay.Constant][13] /* ty=Tensor[(768), float32] */, %1222) /* ty=Tensor[(1, 128, 768), float32] */;
  %1224 = add(%1223, meta[relay.Constant][177] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1225 = qnn.quantize(%1224, 0.187901f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1226 = qnn.quantize(meta[relay.Constant][178] /* ty=Tensor[(768, 768), float32] */, 0.00308738f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1227 = transpose(%1226, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1228 = reshape(%1225, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1229 = transpose(%1227, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1230 = qnn.dense(%1228, %1229, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.187901f /* ty=float32 */, 0.00308738f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1231 = reshape(%1230, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1232 = qnn.quantize(meta[relay.Constant][12] /* ty=Tensor[(768), float32] */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1233 = qnn.requantize(%1231, 0.00058012f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1234 = qnn.add(%1232, %1233, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1235 = reshape(%1234, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1236 = transpose(%1235, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1237 = qnn.requantize(%1236, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0557775f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1238 = qnn.quantize(%1224, 0.187901f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1239 = qnn.quantize(meta[relay.Constant][180] /* ty=Tensor[(768, 768), float32] */, 0.00308738f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1240 = transpose(%1239, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1241 = reshape(%1238, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1242 = transpose(%1240, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1243 = qnn.dense(%1241, %1242, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.187901f /* ty=float32 */, 0.00308738f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1244 = reshape(%1243, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1245 = qnn.quantize(meta[relay.Constant][179] /* ty=Tensor[(768), float32] */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1246 = qnn.requantize(%1244, 0.00058012f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1247 = qnn.add(%1245, %1246, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1248 = reshape(%1247, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1249 = transpose(%1248, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1250 = qnn.requantize(%1249, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0557775f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1251 = reshape(%1250, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1252 = reshape(%1237, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1253 = transpose(%1251, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1254 = qnn.batch_matmul(%1252, %1253, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0557775f /* ty=float32 */, 0.0557775f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %1255 = reshape(%1254, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1256 = qnn.requantize(%1255, 0.00311113f /* ty=float32 */, 0 /* ty=int32 */, 0.818982f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1257 = qnn.dequantize(%1256, 0.818982f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1258 = divide(%1257, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1259 = add(%1258, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1260 = nn.softmax(%1259, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1261 = qnn.quantize(%1260, 0.00388178f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1262 = qnn.quantize(%1224, 0.187901f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1263 = qnn.quantize(meta[relay.Constant][182] /* ty=Tensor[(768, 768), float32] */, 0.00308738f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1264 = transpose(%1263, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1265 = reshape(%1262, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1266 = transpose(%1264, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1267 = qnn.dense(%1265, %1266, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.187901f /* ty=float32 */, 0.00308738f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1268 = reshape(%1267, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1269 = qnn.quantize(meta[relay.Constant][181] /* ty=Tensor[(768), float32] */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1270 = qnn.requantize(%1268, 0.00058012f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1271 = qnn.add(%1269, %1270, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1272 = reshape(%1271, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1273 = transpose(%1272, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1274 = qnn.requantize(%1273, 0.0504717f /* ty=float32 */, 0 /* ty=int32 */, 0.0557775f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1275 = reshape(%1274, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1276 = reshape(%1261, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %1277 = transpose(%1275, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1278 = qnn.batch_matmul(%1276, %1277, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00388178f /* ty=float32 */, 0.0557775f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %1279 = reshape(%1278, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1280 = transpose(%1279, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %1281 = reshape(%1280, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1282 = qnn.requantize(%1281, 0.000216516f /* ty=float32 */, 0 /* ty=int32 */, 0.0135072f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1283 = qnn.quantize(meta[relay.Constant][183] /* ty=Tensor[(768, 768), float32] */, 0.0027186f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1284 = transpose(%1283, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1285 = reshape(%1282, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1286 = transpose(%1284, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1287 = qnn.dense(%1285, %1286, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0135072f /* ty=float32 */, 0.0027186f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1288 = reshape(%1287, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1289 = qnn.quantize(meta[relay.Constant][11] /* ty=Tensor[(768), float32] */, 0.00967607f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1290 = qnn.requantize(%1288, 3.67206e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00967607f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1291 = qnn.add(%1289, %1290, 0.00967607f /* ty=float32 */, 0 /* ty=int32 */, 0.00967607f /* ty=float32 */, 0 /* ty=int32 */, 0.00967607f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1292 = qnn.requantize(%1291, 0.00967607f /* ty=float32 */, 0 /* ty=int32 */, 0.00868644f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1293 = qnn.quantize(%1224, 0.187901f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1294 = qnn.add(%1292, %1293, 0.00868644f /* ty=float32 */, 0 /* ty=int32 */, 0.187901f /* ty=float32 */, 0 /* ty=int32 */, 0.188074f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1295 = qnn.dequantize(%1294, 0.188074f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1296 = mean(%1295, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1297 = subtract(%1295, %1296) /* ty=Tensor[(1, 128, 768), float32] */;
  %1298 = multiply(%1297, %1297) /* ty=Tensor[(1, 128, 768), float32] */;
  %1299 = mean(%1298, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1300 = add(%1299, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1301 = subtract(%1295, %1296) /* ty=Tensor[(1, 128, 768), float32] */;
  %1302 = sqrt(%1300) /* ty=Tensor[(1, 128, 1), float32] */;
  %1303 = divide(%1301, %1302) /* ty=Tensor[(1, 128, 768), float32] */;
  %1304 = multiply(meta[relay.Constant][10] /* ty=Tensor[(768), float32] */, %1303) /* ty=Tensor[(1, 128, 768), float32] */;
  %1305 = add(%1304, meta[relay.Constant][184] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1306 = qnn.quantize(%1305, 0.183957f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1307 = qnn.quantize(meta[relay.Constant][185] /* ty=Tensor[(3072, 768), float32] */, 0.0178848f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %1308 = transpose(%1307, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %1309 = reshape(%1306, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1310 = transpose(%1308, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %1311 = qnn.dense(%1309, %1310, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.183957f /* ty=float32 */, 0.0178848f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %1312 = reshape(%1311, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1313 = qnn.requantize(%1312, 0.00329005f /* ty=float32 */, 0 /* ty=int32 */, 0.237265f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %1314 = qnn.dequantize(%1313, 0.237265f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1315 = add(meta[relay.Constant][9] /* ty=Tensor[(3072), float32] */, %1314) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1316 = divide(%1315, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1317 = erf(%1316) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1318 = add(%1317, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1319 = multiply(%1315, %1318) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1320 = multiply(%1319, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1321 = qnn.quantize(%1320, 0.021931f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %1322 = qnn.quantize(meta[relay.Constant][186] /* ty=Tensor[(768, 3072), float32] */, 0.0326228f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %1323 = transpose(%1322, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %1324 = reshape(%1321, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %1325 = transpose(%1323, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %1326 = qnn.dense(%1324, %1325, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.021931f /* ty=float32 */, 0.0326228f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1327 = reshape(%1326, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1328 = qnn.quantize(meta[relay.Constant][8] /* ty=Tensor[(768), float32] */, 0.0327852f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1329 = qnn.requantize(%1327, 0.00071545f /* ty=float32 */, 0 /* ty=int32 */, 0.0327852f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1330 = qnn.add(%1328, %1329, 0.0327852f /* ty=float32 */, 0 /* ty=int32 */, 0.0327852f /* ty=float32 */, 0 /* ty=int32 */, 0.0327852f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1331 = qnn.requantize(%1330, 0.0327852f /* ty=float32 */, 0 /* ty=int32 */, 0.0327988f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1332 = qnn.quantize(%1305, 0.183957f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1333 = qnn.add(%1331, %1332, 0.0327988f /* ty=float32 */, 0 /* ty=int32 */, 0.183957f /* ty=float32 */, 0 /* ty=int32 */, 0.181211f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1334 = qnn.dequantize(%1333, 0.181211f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1335 = mean(%1334, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1336 = subtract(%1334, %1335) /* ty=Tensor[(1, 128, 768), float32] */;
  %1337 = multiply(%1336, %1336) /* ty=Tensor[(1, 128, 768), float32] */;
  %1338 = mean(%1337, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1339 = add(%1338, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1340 = subtract(%1334, %1335) /* ty=Tensor[(1, 128, 768), float32] */;
  %1341 = sqrt(%1339) /* ty=Tensor[(1, 128, 1), float32] */;
  %1342 = divide(%1340, %1341) /* ty=Tensor[(1, 128, 768), float32] */;
  %1343 = multiply(meta[relay.Constant][7] /* ty=Tensor[(768), float32] */, %1342) /* ty=Tensor[(1, 128, 768), float32] */;
  %1344 = add(%1343, meta[relay.Constant][187] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1345 = qnn.quantize(%1344, 0.21481f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1346 = qnn.quantize(meta[relay.Constant][188] /* ty=Tensor[(768, 768), float32] */, 0.00344022f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1347 = transpose(%1346, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1348 = reshape(%1345, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1349 = transpose(%1347, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1350 = qnn.dense(%1348, %1349, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.21481f /* ty=float32 */, 0.00344022f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1351 = reshape(%1350, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1352 = qnn.quantize(meta[relay.Constant][6] /* ty=Tensor[(768), float32] */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1353 = qnn.requantize(%1351, 0.000738993f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1354 = qnn.add(%1352, %1353, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1355 = reshape(%1354, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1356 = transpose(%1355, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1357 = qnn.requantize(%1356, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.0635539f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1358 = qnn.quantize(%1344, 0.21481f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1359 = qnn.quantize(meta[relay.Constant][190] /* ty=Tensor[(768, 768), float32] */, 0.00344022f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1360 = transpose(%1359, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1361 = reshape(%1358, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1362 = transpose(%1360, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1363 = qnn.dense(%1361, %1362, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.21481f /* ty=float32 */, 0.00344022f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1364 = reshape(%1363, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1365 = qnn.quantize(meta[relay.Constant][189] /* ty=Tensor[(768), float32] */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1366 = qnn.requantize(%1364, 0.000738993f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1367 = qnn.add(%1365, %1366, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1368 = reshape(%1367, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1369 = transpose(%1368, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1370 = qnn.requantize(%1369, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.0635539f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %1371 = reshape(%1370, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1372 = reshape(%1357, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1373 = transpose(%1371, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1374 = qnn.batch_matmul(%1372, %1373, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0635539f /* ty=float32 */, 0.0635539f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */;
  %1375 = reshape(%1374, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1376 = qnn.requantize(%1375, 0.00403909f /* ty=float32 */, 0 /* ty=int32 */, 1.06954f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1377 = qnn.dequantize(%1376, 1.06954f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1378 = divide(%1377, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1379 = add(%1378, %58) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1380 = nn.softmax(%1379, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1381 = qnn.quantize(%1380, 0.00391843f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %1382 = qnn.quantize(%1344, 0.21481f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1383 = qnn.quantize(meta[relay.Constant][192] /* ty=Tensor[(768, 768), float32] */, 0.00344022f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1384 = transpose(%1383, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1385 = reshape(%1382, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1386 = transpose(%1384, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1387 = qnn.dense(%1385, %1386, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.21481f /* ty=float32 */, 0.00344022f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1388 = reshape(%1387, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1389 = qnn.quantize(meta[relay.Constant][191] /* ty=Tensor[(768), float32] */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1390 = qnn.requantize(%1388, 0.000738993f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1391 = qnn.add(%1389, %1390, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.063538f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1392 = reshape(%1391, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %1393 = transpose(%1392, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1394 = qnn.requantize(%1393, 0.063538f /* ty=float32 */, 0 /* ty=int32 */, 0.0635539f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %1395 = reshape(%1394, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  %1396 = reshape(%1381, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */;
  %1397 = transpose(%1395, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */;
  %1398 = qnn.batch_matmul(%1396, %1397, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00391843f /* ty=float32 */, 0.0635539f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */;
  %1399 = reshape(%1398, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1400 = transpose(%1399, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %1401 = reshape(%1400, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1402 = qnn.requantize(%1401, 0.000249032f /* ty=float32 */, 0 /* ty=int32 */, 0.0159704f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1403 = qnn.quantize(meta[relay.Constant][193] /* ty=Tensor[(768, 768), float32] */, 0.00247853f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 768), int8] */;
  %1404 = transpose(%1403, axes=[1, 0]) /* ty=Tensor[(768, 768), int8] */;
  %1405 = reshape(%1402, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1406 = transpose(%1404, axes=None) /* ty=Tensor[(768, 768), int8] */;
  %1407 = qnn.dense(%1405, %1406, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0159704f /* ty=float32 */, 0.00247853f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1408 = reshape(%1407, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1409 = qnn.quantize(meta[relay.Constant][5] /* ty=Tensor[(768), float32] */, 0.0115721f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1410 = qnn.requantize(%1408, 3.95832e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0115721f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1411 = qnn.add(%1409, %1410, 0.0115721f /* ty=float32 */, 0 /* ty=int32 */, 0.0115721f /* ty=float32 */, 0 /* ty=int32 */, 0.0115721f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1412 = qnn.requantize(%1411, 0.0115721f /* ty=float32 */, 0 /* ty=int32 */, 0.0113828f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1413 = qnn.quantize(%1344, 0.21481f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1414 = qnn.add(%1412, %1413, 0.0113828f /* ty=float32 */, 0 /* ty=int32 */, 0.21481f /* ty=float32 */, 0 /* ty=int32 */, 0.214002f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1415 = qnn.dequantize(%1414, 0.214002f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1416 = mean(%1415, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1417 = subtract(%1415, %1416) /* ty=Tensor[(1, 128, 768), float32] */;
  %1418 = multiply(%1417, %1417) /* ty=Tensor[(1, 128, 768), float32] */;
  %1419 = mean(%1418, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1420 = add(%1419, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1421 = subtract(%1415, %1416) /* ty=Tensor[(1, 128, 768), float32] */;
  %1422 = sqrt(%1420) /* ty=Tensor[(1, 128, 1), float32] */;
  %1423 = divide(%1421, %1422) /* ty=Tensor[(1, 128, 768), float32] */;
  %1424 = multiply(meta[relay.Constant][4] /* ty=Tensor[(768), float32] */, %1423) /* ty=Tensor[(1, 128, 768), float32] */;
  %1425 = add(%1424, meta[relay.Constant][194] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1426 = qnn.quantize(%1425, 0.263379f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1427 = qnn.quantize(meta[relay.Constant][195] /* ty=Tensor[(3072, 768), float32] */, 0.00280545f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(3072, 768), int8] */;
  %1428 = transpose(%1427, axes=[1, 0]) /* ty=Tensor[(768, 3072), int8] */;
  %1429 = reshape(%1426, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1430 = transpose(%1428, axes=None) /* ty=Tensor[(3072, 768), int8] */;
  %1431 = qnn.dense(%1429, %1430, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.263379f /* ty=float32 */, 0.00280545f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */;
  %1432 = reshape(%1431, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1433 = qnn.requantize(%1432, 0.000738896f /* ty=float32 */, 0 /* ty=int32 */, 0.0316476f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %1434 = qnn.dequantize(%1433, 0.0316476f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1435 = add(meta[relay.Constant][3] /* ty=Tensor[(3072), float32] */, %1434) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1436 = divide(%1435, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1437 = erf(%1436) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1438 = add(%1437, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1439 = multiply(%1435, %1438) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1440 = multiply(%1439, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %1441 = qnn.quantize(%1440, 0.024651f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3072), int8] */;
  %1442 = qnn.quantize(meta[relay.Constant][196] /* ty=Tensor[(768, 3072), float32] */, 0.00629422f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(768, 3072), int8] */;
  %1443 = transpose(%1442, axes=[1, 0]) /* ty=Tensor[(3072, 768), int8] */;
  %1444 = reshape(%1441, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */;
  %1445 = transpose(%1443, axes=None) /* ty=Tensor[(768, 3072), int8] */;
  %1446 = qnn.dense(%1444, %1445, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.024651f /* ty=float32 */, 0.00629422f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */;
  %1447 = reshape(%1446, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1448 = qnn.quantize(meta[relay.Constant][2] /* ty=Tensor[(768), float32] */, 0.0325147f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(768), int8] */;
  %1449 = qnn.requantize(%1447, 0.000155159f /* ty=float32 */, 0 /* ty=int32 */, 0.0325147f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1450 = qnn.add(%1448, %1449, 0.0325147f /* ty=float32 */, 0 /* ty=int32 */, 0.0325147f /* ty=float32 */, 0 /* ty=int32 */, 0.0325147f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1451 = qnn.requantize(%1450, 0.0325147f /* ty=float32 */, 0 /* ty=int32 */, 0.0284485f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %1452 = qnn.quantize(%1425, 0.263379f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1453 = qnn.add(%1451, %1452, 0.0284485f /* ty=float32 */, 0 /* ty=int32 */, 0.263379f /* ty=float32 */, 0 /* ty=int32 */, 0.260066f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 768), int8] */;
  %1454 = qnn.dequantize(%1453, 0.260066f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 768), float32] */;
  %1455 = mean(%1454, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1456 = subtract(%1454, %1455) /* ty=Tensor[(1, 128, 768), float32] */;
  %1457 = multiply(%1456, %1456) /* ty=Tensor[(1, 128, 768), float32] */;
  %1458 = mean(%1457, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1459 = add(%1458, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1460 = subtract(%1454, %1455) /* ty=Tensor[(1, 128, 768), float32] */;
  %1461 = sqrt(%1459) /* ty=Tensor[(1, 128, 1), float32] */;
  %1462 = divide(%1460, %1461) /* ty=Tensor[(1, 128, 768), float32] */;
  %1463 = multiply(meta[relay.Constant][1] /* ty=Tensor[(768), float32] */, %1462) /* ty=Tensor[(1, 128, 768), float32] */;
  %1464 = add(%1463, meta[relay.Constant][197] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %1465 = qnn.quantize(%1464, 0.0865105f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 768), int8] */;
  %1466 = reshape(%1465, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %1467 = qnn.dequantize(%1466, 0.0865105f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(128, 768), float32] */;
  %1468 = nn.dense(%1467, meta[relay.Constant][198] /* ty=Tensor[(2, 768), float32] */, units=None, out_dtype="float32") /* ty=Tensor[(128, 2), float32] */;
  %1469 = reshape(%1468, newshape=[1, 128, 2]) /* ty=Tensor[(1, 128, 2), float32] */;
  %1470 = add(meta[relay.Constant][0] /* ty=Tensor[(2), float32] */, %1469) /* ty=Tensor[(1, 128, 2), float32] */;
  %1471 = split(%1470, indices_or_sections=[1], axis=-1) /* ty=(Tensor[(1, 128, 1), float32], Tensor[(1, 128, 1), float32]) */;
  %1472 = %1471.0;
  %1473 = %1471.1;
  %1474 = squeeze(%1472, axis=[2]) /* ty=Tensor[(1, 128), float32] */;
  %1475 = squeeze(%1473, axis=[2]) /* ty=Tensor[(1, 128), float32] */;
  (%1474, %1475)
}


Target: cuda -keys=cuda,gpu -arch=sm_86 -max_num_threads=1024 -thread_warp_size=32, Device: cuda(0)
[0] vm_mod_fused_less_add_where_take_add_less_add_where_take_add, def @vm_mod_fused_less_add_where_take_add_less_add_where_take_add(%p0: Tensor[(1, 128), int64], %p1: Tensor[(30522, 768), float32], %p2: Tensor[(1, 128, 768), float32], %p3: Tensor[(1, 128), int64], %p4: Tensor[(2, 768), float32], Primitive=1, hash="7435a76b9eca0cff") -> Tensor[(1, 128, 768), float32] {
  %0 = less(%p0, 0 /* ty=int64 */) /* ty=Tensor[(1, 128), bool] */;
  %1 = add(%p0, 30522 /* ty=int64 */) /* ty=Tensor[(1, 128), int64] */;
  %2 = where(%0, %1, %p0) /* ty=Tensor[(1, 128), int64] */;
  %3 = take(%p1, %2, axis=0) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = less(%p3, 0 /* ty=int64 */) /* ty=Tensor[(1, 128), bool] */;
  %5 = add(%p3, 2 /* ty=int64 */) /* ty=Tensor[(1, 128), int64] */;
  %6 = where(%4, %5, %p3) /* ty=Tensor[(1, 128), int64] */;
  %7 = add(%3, %p2) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = take(%p4, %6, axis=0) /* ty=Tensor[(1, 128, 768), float32] */;
  add(%7, %8) /* ty=Tensor[(1, 128, 768), float32] */
}

[1] vm_mod_fused_mean, def @vm_mod_fused_mean(%p0: Tensor[(1, 128, 768), float32], Primitive=1, hash="63ad814842e263a0") -> Tensor[(1, 128, 1), float32] {
  mean(%p0, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */
}

[2] vm_mod_fused_subtract, def @vm_mod_fused_subtract(%p0: Tensor[(1, 128, 768), float32], %p1: Tensor[(1, 128, 1), float32], Primitive=1, hash="c31dc23fd4e9e45b") -> Tensor[(1, 128, 768), float32] {
  subtract(%p0, %p1) /* ty=Tensor[(1, 128, 768), float32] */
}

[3] vm_mod_fused_multiply_mean, def @vm_mod_fused_multiply_mean(%p0: Tensor[(1, 128, 768), float32], Primitive=1, hash="c484a0ef784097ef") -> Tensor[(1, 128, 1), float32] {
  %0 = multiply(%p0, %p0) /* ty=Tensor[(1, 128, 768), float32] */;
  mean(%0, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */
}

[4] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="6089bafc1d9bd774") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0418306f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[5] vm_mod_fused_reshape, def @vm_mod_fused_reshape(%p0: Tensor[(1, 128, 768), int8], Primitive=1, relay.reshape_only=1, hash="9ede90481154c02a") -> Tensor[(128, 768), int8] {
  reshape(%p0, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[6] vm_mod_fused_nn_dense, def @vm_mod_fused_nn_dense(%p0: Tensor[(128, 768), int8], %p1: Tensor[(768, 768), int8], Primitive=1, hash="9e1529df49a54028") -> Tensor[(128, 768), int32] {
  nn.dense(%p0, %p1, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */
}

[7] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0_, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0_(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="4e348c39bf15439b") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2036990984, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2144568221, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[8] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4_, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4_(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="aae0ecdbee53e015") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2036990984, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2144568221, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[9] vm_mod_fused_nn_batch_matmul, def @vm_mod_fused_nn_batch_matmul(%p0: Tensor[(12, 128, 64), int8], %p1: Tensor[(12, 128, 64), int8], Primitive=1, hash="a726b0fa463c7765") -> Tensor[(12, 128, 128), int32] {
  nn.batch_matmul(%p0, %p1, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 128), int32] */
}

[10] vm_mod_fused_expand_dims_expand_dims_cast_subtract_multiply, def @vm_mod_fused_expand_dims_expand_dims_cast_subtract_multiply(%p0: Tensor[(1, 128), int64], Primitive=1, hash="b49ed9818f20d4ec") -> Tensor[(1, 1, 1, 128), float32] {
  %0 = expand_dims(%p0, axis=1) /* ty=Tensor[(1, 1, 128), int64] */;
  %1 = expand_dims(%0, axis=2) /* ty=Tensor[(1, 1, 1, 128), int64] */;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %3 = subtract(1f /* ty=float32 */, %2) /* ty=Tensor[(1, 1, 1, 128), float32] */;
  multiply(%3, -10000f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 128), float32] */
}

[11] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="695b3ed8ee178775") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1481402602, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 0.821003f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[12] vm_mod_fused_nn_softmax_divide_add_clip_round_cast, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="8b6d00d8c55306f9") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00468568f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[13] vm_mod_fused_reshape_1, def @vm_mod_fused_reshape_1(%p0: Tensor[(1, 12, 128, 128), int8], Primitive=1, relay.reshape_only=1, hash="5fbe45f87192d010") -> Tensor[(12, 128, 128), int8] {
  reshape(%p0, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), int8] */
}

[14] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__1, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__1(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="62a2a690fc86bc6b") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2036990984, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2144568221, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[15] vm_mod_fused_nn_batch_matmul_1, def @vm_mod_fused_nn_batch_matmul_1(%p0: Tensor[(12, 128, 128), int8], %p1: Tensor[(12, 64, 128), int8], Primitive=1, hash="6622306556325565") -> Tensor[(12, 128, 64), int32] {
  nn.batch_matmul(%p0, %p1, out_dtype="int32", transpose_b=True) /* ty=Tensor[(12, 128, 64), int32] */
}

[16] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="4ab98097a8f569bc") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1083155719, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[17] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011_, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011_(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="1fb595471a16a605") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1355562957, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1088186391, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1744877185, shift=-1) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2119702974, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.0423788f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[18] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_1, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_1(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="8b649f1648c0e01c") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.281883f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[19] vm_mod_fused_nn_dense_1, def @vm_mod_fused_nn_dense_1(%p0: Tensor[(128, 768), int8], %p1: Tensor[(3072, 768), int8], Primitive=1, hash="527a7a78ab906c9b") -> Tensor[(128, 3072), int32] {
  nn.dense(%p0, %p1, units=None, out_dtype="int32") /* ty=Tensor[(128, 3072), int32] */
}

[20] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057_, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057_(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="c4f3b8e1f6a77e59") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1168655133, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.0794641f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.056826f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[21] vm_mod_fused_nn_dense_2, def @vm_mod_fused_nn_dense_2(%p0: Tensor[(128, 3072), int8], %p1: Tensor[(768, 3072), int8], Primitive=1, hash="f79576d55e507acc") -> Tensor[(128, 768), int32] {
  nn.dense(%p0, %p1, units=None, out_dtype="int32") /* ty=Tensor[(128, 768), int32] */
}

[22] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__1, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__1(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="d3120bd24e9ccd31") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1754765766, shift=-8) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=2122383870, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1573234258, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1898838378, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.318795f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[23] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_2, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_2(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="ae29b0d564480ef2") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0688788f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[24] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__1, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__1(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="f19c59797bf2e76c") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1236827901, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2057591275, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[25] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__2, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__2(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="91ad346993a77d36") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1236827901, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2057591275, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[26] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_1, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_1(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="1fc59f8b2f486019") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1639343387, shift=-9) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 3.40036f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[27] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_1, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_1(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="0c4056aa99413d5d") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00782788f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[28] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__3, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__3(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="e3bbf7f759214565") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1236827901, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2057591275, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[29] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_1, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_1(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="c29d7811d33ddaa0") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1157595131, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[30] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__2, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__2(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="8e027cfefebb0933") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1093701120, shift=-8) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1107908847, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1119815034, shift=-1) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1883834008, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.0785187f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[31] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_3, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_3(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="df0dfd07191934ab") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.352211f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[32] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__1, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__1(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="c1402419769ade36") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1699636538, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.0617177f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0309665f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[33] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__3, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__3(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="01abc2cff0bc42a5") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2021751432, shift=-8) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=2114794798, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1434055916, shift=-2) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1835997516, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.411965f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[34] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_4, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_4(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="5f1702e0b4e870d6") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0787925f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[35] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__2, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__2(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="af2579d6f15defe1") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1109470121, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2019133174, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[36] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__4, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__4(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="bc52fceeb9a623c3") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1109470121, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2019133174, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[37] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_2, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_2(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="aa3cc4d571ce26a0") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1621108901, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 0.721348f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[38] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_2, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_2(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="1cab5e43734e748d") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00422856f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[39] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__5, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__5(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="613191fa1d119b6d") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1109470121, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2019133174, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[40] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_2, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_2(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="6c8cedc4c2ffa1a9") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1825763291, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[41] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__4, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__4(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="1bfcd15e724799b4") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1816179860, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1087632113, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=2119131794, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1994803031, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.0848232f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[42] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_5, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_5(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="c81e7dca6527fb8b") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.372895f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[43] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__2, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__2(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="e3c3c3464203d179") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1472359447, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.055361f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0278601f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[44] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__5, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__5(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="5f6a6064b3a79ac5") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1123073917, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1078349019, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1737347780, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1981388193, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.404154f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[45] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_6, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_6(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="340defb9739f03e6") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0804915f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[46] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__3, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__3(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="641cac9d920b424e") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1692391052, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2083390417, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[47] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__6, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__6(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="01b6ae11fea13763") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1692391052, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2083390417, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[48] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_3, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_3(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="746b306216012c05") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1824760440, shift=-9) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 2.49692f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[49] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_3, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_3(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="c0a74df3227ad060") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00775098f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[50] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__7, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__7(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="aa16cdca2f617d86") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1692391052, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2083390417, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[51] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_3, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_3(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="f7f8b2a1e21ee284") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1182511024, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[52] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__6, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__6(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="91eaaddfa42c1065") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1722600307, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1132513911, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1829353327, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2075526722, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.083282f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[53] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_7, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_7(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="318a96813f7ac43e") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.383442f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[54] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__3, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__3(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="756329730a19f372") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1366062712, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.0637589f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0292148f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[55] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__7, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__7(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="851247008a083b41") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1432110850, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1076848852, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1653712621, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2135180052, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.385651f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[56] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_8, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_8(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="b60c2cda58a5cde7") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0897698f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[57] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__4, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__4(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="234fbca8b5ed7591") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2006415635, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2099569830, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[58] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__8, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__8(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="cf06d4aacfaa2953") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2006415635, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2099569830, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[59] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_4, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_4(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="084d537ee3365f91") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1394037865, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 0.804519f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[60] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_4, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_4(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="3d3afe334b47d5be") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00352344f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[61] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__9, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__9(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="89a3bcd215a305f6") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2006415635, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2099569830, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[62] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_4, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_4(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="832fd8b5ada1f0d6") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1505645021, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[63] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__8, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__8(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="a7575c5555c016f9") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2087503706, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1158160445, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1917469742, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2075124593, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.0929001f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[64] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_9, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_9(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="ed18980da8ed79b6") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.425838f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[65] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__4, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__4(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="fbc78f995a1f9b53") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1737662877, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.0608309f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0278554f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[66] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__9, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__9(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="4130714abb5452fd") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1499690680, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1154742486, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1248327458, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1131079983, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.40425f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[67] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_10, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_10(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="4e69288c28461924") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0862374f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[68] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__5, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__5(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="65d657ed1d19aa58") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1866296874, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2014835765, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[69] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__10, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__10(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="c36dc0a3e026c5c8") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1866296874, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2014835765, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[70] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_5, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_5(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="69ec3778986de2fb") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1203632679, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 1.18478f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[71] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_5, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_5(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="f489c8c134c9b544") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00576953f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[72] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__11, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__11(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="6ffd4f547f9d9426") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1866296874, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2014835765, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[73] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_5, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_5(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="6720c2e8e90ddd18") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1380671483, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[74] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__10, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__10(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="cbb5ca6bbee2d8a2") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1240151372, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1087893522, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=2025090125, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2106659598, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.0879086f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[75] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_11, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_11(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="410f7dad6d3bc699") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.381835f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[76] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__5, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__5(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="f3f453a3543dcc4a") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1420721583, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.0616998f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0225147f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[77] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__11, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__11(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="c4ffad651e1fa292") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1853933738, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1189955846, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1962561417, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1175154635, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.348884f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[78] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_12, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_12(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="f7643aa09cd6fec0") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0867861f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[79] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__6, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__6(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="32e99f7ceabc1542") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1991784269, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2144400504, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[80] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__12, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__12(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="25c9bec9e2e089a7") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1991784269, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2144400504, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[81] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_6, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_6(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="8ac14a2ac1111cdf") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1448516981, shift=-9) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 2.54691f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[82] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_6, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_6(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="93362b9bd7280963") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00770485f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[83] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__13, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__13(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="1737de259f919b74") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1991784269, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2144400504, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[84] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_6, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_6(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="f4f73fca1c8bc1a4") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=2121709792, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[85] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__12, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__12(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="9f98c862ea341fda") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1239053057, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1109222511, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=2133654202, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2099968837, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.0887498f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[86] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_13, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_13(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="a232e50ddaa2b6a6") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.361102f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[87] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__6, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__6(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="fe5163bf1fbd50cb") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1657023410, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.0591114f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.022785f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[88] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__13, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__13(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="77828415168d5e9d") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1924465841, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1211394390, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1141398549, shift=-2) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1177260447, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.32935f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[89] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_14, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_14(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="44cbaef77942b444") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0995139f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[90] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__7, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__7(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="e82cefc049ced8b3") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1548004878, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2145942080, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[91] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__14, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__14(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="96e851e7a774b97a") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1548004878, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2145942080, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[92] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_7, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_7(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="223850642ec88538") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2076262730, shift=-9) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 1.69195f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[93] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_7, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_7(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="8103cb698c89909a") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00780481f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[94] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__15, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__15(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="031e30558e28d14e") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1548004878, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2145942080, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[95] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_7, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_7(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="3f71f93c9bad8884") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=2005567723, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[96] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__14, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__14(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="022ca1ca53cca39e") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1629126657, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1117054766, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1733564374, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2139701024, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.0998758f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[97] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_15, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_15(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="59ab8215d37c66ea") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.282313f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[98] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__7, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__7(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="cbfc780359ce2a9f") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1215946732, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.106411f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0238399f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[99] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__15, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__15(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="8c3327f8d2ad45a6") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1864118910, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1304497537, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1215715322, shift=-2) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1172074217, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.258628f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[100] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_16, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_16(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="812f26390c666f40") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.131961f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[101] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__8, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__8(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="c9eed0a413ddb5f9") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1281758470, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2014676259, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[102] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__16, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__16(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="fe735174f3b9645a") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1281758470, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2014676259, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[103] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_8, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_8(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="a91e576ae4eac203") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1909328720, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 0.944639f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[104] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_8, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_8(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="0f36798d0f003606") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00538113f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[105] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__17, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__17(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="1f55e2e87ee6d547") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1281758470, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2014676259, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[106] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_8, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_8(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="4c625d9fc9cbc966") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1517785841, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[107] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__16, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__16(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="818f94439e052994") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1689805725, shift=-8) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1352264352, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1223219134, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1076167756, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.131664f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[108] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_17, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_17(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="7f22ef285ea2c1ac") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.226912f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[109] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__8, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__8(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="55a45a40c070befa") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1340361654, shift=-6) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.194485f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0239143f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[110] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__17, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__17(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="c56a5f544a878496") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1761772523, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1341456020, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1414188934, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1141722426, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.213401f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[111] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_18, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_18(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="e90f9f2d5a4b1e0f") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.161954f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[112] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__9, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__9(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="7d1c36ed3fbb0069") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1351247932, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=1972035053, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[113] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__18, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__18(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="9e88fdce78c5d889") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1351247932, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=1972035053, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[114] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_9, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_9(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="a8ac3ad283dd2cee") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1984366829, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 0.970322f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[115] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_9, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_9(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="3de019b92d09b4c9") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00389631f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[116] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__19, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__19(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="15d5766f0e17e6a8") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1351247932, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=1972035053, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[117] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_9, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_9(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="c9f0f558f7fffa18") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1095848338, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[118] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__18, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__18(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="86b84a213c785184") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1297847697, shift=-8) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1602892432, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1943535649, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2090616982, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.166359f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[119] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_19, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_19(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="b512b9ae6af02e28") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.20307f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[120] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__9, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__9(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="c9216c1bc4a54b9b") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1572892531, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.136854f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.0204103f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[121] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__19, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__19(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="64621f2952b26704") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1305239454, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1287325548, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1761880164, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1140226161, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.19123f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[122] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_20, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_20(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="a5ba0f18b40e513d") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.187901f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[123] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__10, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__10(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="cea031ebd6b229ad") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1579718853, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=1943203671, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[124] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__20, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__20(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="d9cebd5c00e92a52") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1579718853, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=1943203671, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[125] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_10, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_10(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="dd67044ff38a7fcc") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2088402736, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 0.818982f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[126] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_10, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_10(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="33ff1b8221af91e0") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00388178f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[127] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__21, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__21(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="cf544d52f1ef904c") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1579718853, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=1943203671, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[128] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_10, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_10(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="aedb0685c7a33391") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=1101554092, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[129] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__20, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__20(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="42e7cb62d874d859") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2086320794, shift=-8) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1196071237, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1586951454, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=2145506721, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.188074f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[130] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_21, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_21(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="bc66ff493ef7d147") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.183957f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[131] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__10, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__10(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="22514e407653a04f") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1905809062, shift=-6) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.237265f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.021931f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[132] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__21, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__21(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="dd78b57a90e4bbd7") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1499621526, shift=-5) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=2146587763, shift=0) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1554761467, shift=-2) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1090015803, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.181211f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[133] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_22, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_22(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="f4f551e3cfc10ddc") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.21481f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[134] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__11, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_51865714ff9e74c0__11(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="326deb7890e8075a") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1598514586, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2146946655, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */
}

[135] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__22, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__22(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="f2b27f47ab1dda67") -> Tensor[(12, 128, 64), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1598514586, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2146946655, shift=0) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 64, 128), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 64, 128), int8] */;
  %14 = reshape(%13, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 128, 64), int8] */
}

[136] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_11, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_divide_add_11(%p0: Tensor[(12, 128, 128), int32], %p1: Tensor[(1, 1, 1, 128), float32], Primitive=1, hash="0381e1a277455e55") -> Tensor[(1, 12, 128, 128), float32] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=2076133305, shift=-8) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %5 = multiply(%4, 1.06954f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %6 = divide(%5, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  add(%6, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */
}

[137] vm_mod_fused_nn_softmax_divide_add_clip_round_cast_11, def @vm_mod_fused_nn_softmax_divide_add_clip_round_cast_11(%p0: Tensor[(1, 12, 128, 128), float32], %p1: float32, Primitive=1, hash="b91fb2874b4d1148") -> Tensor[(1, 12, 128, 128), int8] {
  %0 = nn.softmax(%p0, axis=3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %1 = divide(%0, 0.00391843f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %2 = add(%1, %p1) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  cast(%4, dtype="int8") /* ty=Tensor[(1, 12, 128, 128), int8] */
}

[138] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__23, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_reshape_transpos_6bf454d4603a4cf4__23(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], Primitive=1, hash="a0a90fab2d8cebad") -> Tensor[(12, 64, 128), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1598514586, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), int8] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %11 = fixed_point_multiply(%10, multiplier=2146946655, shift=0) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %12 = clip(%11, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %13 = cast(%12, dtype="int8") /* ty=Tensor[(1, 12, 128, 64), int8] */;
  %14 = reshape(%13, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), int8] */;
  transpose(%14, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 128), int8] */
}

[139] vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_11, def @vm_mod_fused_reshape_transpose_reshape_fixed_point_multiply_clip_cast_reshape_11(%p0: Tensor[(12, 128, 64), int32], Primitive=1, hash="fb4ce9c27885928b") -> Tensor[(128, 768), int8] {
  %0 = reshape(%p0, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), int32] */;
  %1 = transpose(%0, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), int32] */;
  %2 = reshape(%1, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = fixed_point_multiply(%2, multiplier=2143131843, shift=-6) /* ty=Tensor[(1, 128, 768), int32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  reshape(%5, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */
}

[140] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__22, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__22(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="cd76ef7fab8ff977") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1880470768, shift=-8) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1091605051, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1827594919, shift=-4) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1077793375, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.214002f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[141] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_23, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_23(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="dd4465f54e848ab8") -> Tensor[(1, 128, 768), int8] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.263379f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */
}

[142] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__11, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_multiply_add_divide_erf_add_mu_acec7aa0b8abd057__11(%p0: Tensor[(128, 3072), int32], %p1: Tensor[(3072), float32], %p2: float32, Primitive=1, hash="beab9e8aaa108c99") -> Tensor[(128, 3072), int8] {
  %0 = reshape(%p0, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1604437602, shift=-5) /* ty=Tensor[(1, 128, 3072), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 128, 3072), float32] */;
  %5 = multiply(%4, 0.0316476f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %6 = add(%p1, %5) /* ty=Tensor[(1, 128, 3072), float32] */;
  %7 = divide(%6, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %8 = erf(%7) /* ty=Tensor[(1, 128, 3072), float32] */;
  %9 = add(%8, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %10 = multiply(%6, %9) /* ty=Tensor[(1, 128, 3072), float32] */;
  %11 = multiply(%10, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %12 = divide(%11, 0.024651f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %13 = add(%12, %p2) /* ty=Tensor[(1, 128, 3072), float32] */;
  %14 = clip(%13, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 3072), float32] */;
  %15 = round(%14) /* ty=Tensor[(1, 128, 3072), float32] */;
  %16 = cast(%15, dtype="int8") /* ty=Tensor[(1, 128, 3072), int8] */;
  reshape(%16, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), int8] */
}

[143] vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__23, def @vm_mod_fused_reshape_fixed_point_multiply_clip_cast_cast_add_clip_cast_cast_fixed_point_ea468032983c6011__23(%p0: Tensor[(128, 768), int32], %p1: Tensor[(768), int32], %p2: Tensor[(1, 128, 768), int8], Primitive=1, hash="b5659a3fc0c9cc40") -> Tensor[(1, 128, 768), float32] {
  %0 = reshape(%p0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), int32] */;
  %1 = fixed_point_multiply(%0, multiplier=1311705285, shift=-7) /* ty=Tensor[(1, 128, 768), int32] */;
  %2 = clip(%1, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %3 = cast(%2, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %4 = cast(%3, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %5 = add(%p1, %4) /* ty=Tensor[(1, 128, 768), int32] */;
  %6 = clip(%5, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %9 = fixed_point_multiply(%8, multiplier=1227215124, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %12 = cast(%11, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %13 = cast(%p2, dtype="int32") /* ty=Tensor[(1, 128, 768), int32] */;
  %14 = fixed_point_multiply(%12, multiplier=1879301759, shift=-3) /* ty=Tensor[(1, 128, 768), int32] */;
  %15 = fixed_point_multiply(%13, multiplier=1087423176, shift=1) /* ty=Tensor[(1, 128, 768), int32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 768), int32] */;
  %17 = clip(%16, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), int32] */;
  %18 = cast(%17, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(1, 128, 768), float32] */;
  multiply(%19, 0.260066f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */
}

[144] vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_reshape_cast_multi_a82484e4a0fc8ca8_, def @vm_mod_fused_add_sqrt_divide_multiply_add_divide_add_clip_round_cast_reshape_cast_multi_a82484e4a0fc8ca8_(%p0: Tensor[(1, 128, 1), float32], %p1: Tensor[(1, 128, 768), float32], %p2: Tensor[(768), float32], %p3: Tensor[(768), float32], %p4: float32, Primitive=1, hash="9fb28bc26357e8e0") -> Tensor[(128, 768), float32] {
  %0 = add(%p0, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(1, 128, 1), float32] */;
  %2 = divide(%p1, %1) /* ty=Tensor[(1, 128, 768), float32] */;
  %3 = multiply(%p2, %2) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = add(%3, %p3) /* ty=Tensor[(1, 128, 768), float32] */;
  %5 = divide(%4, 0.0865105f /* ty=float32 */) /* ty=Tensor[(1, 128, 768), float32] */;
  %6 = add(%5, %p4) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = clip(%6, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 128, 768), float32] */;
  %9 = cast(%8, dtype="int8") /* ty=Tensor[(1, 128, 768), int8] */;
  %10 = reshape(%9, newshape=[-1, 768]) /* ty=Tensor[(128, 768), int8] */;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(128, 768), float32] */;
  multiply(%11, 0.0865105f /* ty=float32 */) /* ty=Tensor[(128, 768), float32] */
}

[145] vm_mod_fused_nn_dense_3, def @vm_mod_fused_nn_dense_3(%p0: Tensor[(128, 768), float32], %p1: Tensor[(2, 768), float32], Primitive=1, hash="2bd1de9dda8062a1") -> Tensor[(128, 2), float32] {
  nn.dense(%p0, %p1, units=None, out_dtype="float32") /* ty=Tensor[(128, 2), float32] */
}

[146] vm_mod_fused_reshape_add_split, def @vm_mod_fused_reshape_add_split(%p0: Tensor[(128, 2), float32], %p1: Tensor[(2), float32], Primitive=1, hash="28479eef72b63889") -> (Tensor[(1, 128, 1), float32], Tensor[(1, 128, 1), float32]) {
  %0 = reshape(%p0, newshape=[1, 128, 2]) /* ty=Tensor[(1, 128, 2), float32] */;
  %1 = add(%p1, %0) /* ty=Tensor[(1, 128, 2), float32] */;
  split(%1, indices_or_sections=[1], axis=-1) /* ty=(Tensor[(1, 128, 1), float32], Tensor[(1, 128, 1), float32]) */
}

[147] vm_mod_fused_squeeze, def @vm_mod_fused_squeeze(%p0: (Tensor[(1, 128, 1), float32], Tensor[(1, 128, 1), float32]), Primitive=1, hash="058bddb50540b186") -> Tensor[(1, 128), float32] {
  %0 = %p0.0;
  squeeze(%0, axis=[2]) /* ty=Tensor[(1, 128), float32] */
}

[148] vm_mod_fused_squeeze_1, def @vm_mod_fused_squeeze_1(%p0: (Tensor[(1, 128, 1), float32], Tensor[(1, 128, 1), float32]), Primitive=1, hash="7a3ffef78d74cbfe") -> Tensor[(1, 128), float32] {
  %0 = %p0.1;
  squeeze(%0, axis=[2]) /* ty=Tensor[(1, 128), float32] */
}

